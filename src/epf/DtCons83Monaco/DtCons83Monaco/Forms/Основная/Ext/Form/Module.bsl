// Авторские права обработки: https://bitbucket.org/vptn/dtcons83.epf
// Авторские права редактор Monaco: https://github.com/salexdv/bsl_console

&НаКлиенте
Перем Задания Экспорт;

&НаКлиенте
Перем ТекущееПоле Экспорт;

#Область ОбработчикиСобытийФормы

// Monaco +
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = ЭтотОбъект();
	
	ВерсияОбработки = ОбработкаОбъект.СведенияОВнешнейОбработке().Версия;
	
	АдресМакета = ПоместитьВоВременноеХранилище(ПолучитьМакет("src"), Новый УникальныйИдентификатор());
	
	КоллекцияОбщихМодулей = ПолучитьКоллекциюОбщихМодулей();
	АдресОбщихМодулей = СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей);
	ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей);
	
	БыстрыеПодсказки = Истина;
	ВидимостьКартыКода = Истина;
	ДокументЗагружен = Ложь;
	АвтоИзменениеРазмера = Ложь;
	
	//ИмяСохраненногоФайла = ПолучитьИмяПоследнегоФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Monaco +
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	ОпределитьРазделительПути();
	// Monaco -
	
	Если ЗначениеЗаполнено(Объект.ПолноеИмяФайла) Тогда
		Попытка
			ПрочитатьАлгоритмыИзФайла(Объект.ПолноеИмяФайла);
		Исключение
			Объект.ПолноеИмяФайла = "";
			Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ИнициализироватьКлиента", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКлиента() Экспорт
	
	ОтключитьОбработчикОжидания("ИнициализироватьКлиента");
	
	Если Не ДокументЗагружен Тогда
		ПодключитьОбработчикОжидания("ИнициализироватьКлиента", 1, Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьШрифтКода(ШрифтКода);
	
	КоличествоФоновыхЗаданийПриИзменении(Неопределено);
	
	УстановитьСтраницуКода(?(ЗначениеЗаполнено(СтраницаКода), СтраницаКода, "КодЗапроса"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЭтотОбъект.Модифицированность Тогда
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru='Изменения текущих алгоритмов будут утеряны.';en='Current changes will be lost'");
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОбработатьВопросПродолжения", ЭтаФорма, "ЗАКРЫТЬ");
			ТекстВопроса = НСтр(
			 "en='Current changes will be lost. Close data console?';"
			 "ru='Изменения текущих алгоритмов будут утеряны. Продолжить закрытие консоли алгоритмов?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		Отказ = Истина;
		ЗакрытьКонсоль();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Сообщения = Новый Массив;
	
	Шаблон = "Задайте имя алгоритму";
	Для Каждого Алгоритм Из ЭтотОбъект.Алгоритмы.ПолучитьЭлементы() Цикл
		Если Не ЗначениеЗаполнено(Алгоритм.Имя) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = Шаблон;
			Сообщение.Поле = "Алгоритмы[" + Алгоритм.ПолучитьИдентификатор() + "].Имя";
			Сообщения.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Шаблон = "Задайте имя значению параметров данных";
	Для Каждого Значение Из ЭтотОбъект.Значения Цикл
		Если Не ЗначениеЗаполнено(Значение.Имя) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = Шаблон;
			Сообщение.Поле = "Значения[" + Значение.ПолучитьИдентификатор() + "].Имя";
			Сообщения.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Сообщения.Количество() > 0;
	Для Каждого Сообщение Из Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ШрифтКода = Настройки["ШрифтКода"];
	Элементы.ФормаСправка.Заголовок = Объект.Версия;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьШрифтКода(Команда)
	Диалог = Новый ДиалогВыбораШрифта;
	Диалог.Шрифт = Элементы.ПолеКодЗапроса.Шрифт;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьШрифтКода", ЭтотОбъект);
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШрифтКода(Шрифт, Дополнительно = Неопределено) Экспорт
	Если Шрифт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ШрифтКода = Шрифт;
	Элементы.ПолеКодЗапроса.Шрифт = ШрифтКода;
	Элементы.ПолеКодКлиента1С.Шрифт = ШрифтКода;
	Элементы.ПолеКодСервера1С.Шрифт = ШрифтКода;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтПроекта(Команда)
	Оповещение = Новый ОписаниеОповещения("ОбработатьСайтПроекта", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, "https://bitbucket.org/vptn/dtcons83.epf");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСайтПроекта(КодВозврата, Дополнительно = Неопределено) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодДляВставки(Команда)
	
	пНазваниеЗапроса = "Запрос";
	оповещение = Новый ОписаниеОповещения("ПолучитьКодПродолжить", ЭтаФорма);
	ПоказатьВводСтроки(оповещение, пНазваниеЗапроса, "Введите Имя запроса");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсвечиватьЗапросы(Команда)
	
	ПодсвечиватьЗапросы = НЕ ПодсвечиватьЗапросы;
	Элементы.ПодсвечиватьЗапросы.Пометка = ПодсвечиватьЗапросы;
	ИмяТемы = ПолучитьИмяТемы() + ?(ПодсвечиватьЗапросы, "-query", "");
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСостояния(Команда)
	
	ВидимостьСтрокиСостояния = НЕ ВидимостьСтрокиСостояния;
	
	Если ВидимостьСтрокиСостояния Тогда
		View().showStatusBar();
	Иначе
		View().hideStatusBar();
	КонецЕсли;
	
	УправлениеВидимостьюСтрокиСостояния();
	
КонецПроцедуры

&НаКлиенте
Процедура КартаКода(Команда)
	
	ВидимостьКартыКода = НЕ ВидимостьКартыКода;
	View().minimap(ВидимостьКартыКода);
	УправлениеВидимостьюКартыКода();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАвтоИзменениеРазмера(Команда)
	
	АвтоИзменениеРазмера = НЕ АвтоИзменениеРазмера;
	Элементы.АвтоИзменениеРазмера.Пометка = АвтоИзменениеРазмера;
	View().setOption("autoResizeEditorLayout", АвтоИзменениеРазмера);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеТемами(Команда)
	
	УстановитьПометкуТемы(Команда.Имя);
	ИмяТемы = ПолучитьИмяТемы();
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	Элементы.ФормаНастройки.Пометка = НЕ Элементы.ФормаНастройки.Пометка;
	Элементы.Настройки.Видимость = Элементы.ФормаНастройки.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбщиеМодули(Команда)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		
		КаталогМодулей = КаталогИсходногоКода + "CommonModules";
		КаталогНаДиске = Новый Файл(КаталогМодулей);
		
		Если КаталогНаДиске.Существует() Тогда
			ПараметрыЗагрузки = Новый Структура("КаталогМодулей", КаталогМодулей);
			Оповещение = Новый ОписаниеОповещения("ВопросЗагрузкиОбщихМодулейЗавершение", ЭтотОбъект, ПараметрыЗагрузки);
			ТекстВопроса = "Загрузка всех общих модулей может занять длительное время
			|и потребовать значительных ресурсов памяти. Всё равно продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПробелыИТабуляции(Команда)
	
	ОтображатьПробелыИТабуляции = НЕ ОтображатьПробелыИТабуляции;
	CodeView().showStatusBar();
	QueryView().showStatusBar();
	УправлениеВидимостьюПробеловТабуляций();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюПробеловТабуляций()

	Элементы.ОтображатьПробелыИТабуляции.Пометка = ОтображатьПробелыИТабуляции;
	CodeView().renderWhitespace(ОтображатьПробелыИТабуляции);
	QueryView().renderWhitespace(ОтображатьПробелыИТабуляции);
	
КонецПроцедуры


#КонецОбласти

#Область ИсходныйКод

&НаКлиенте
Процедура ВыборКаталогаИсходногоКодаЗавершение(Файлы, ДопПараметры) Экспорт
	
	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		Объект.КаталогИсходногоКодаКонфигурации = Файлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходногоКодаКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыборКаталогаИсходногоКодаЗавершение", ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = Объект.КаталогИсходногоКодаКонфигурации;
	ДиалогВыбора.Показать(Оповещение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура СтраницыКодаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Не ДокументЗагружен Тогда
		Возврат;
	КонецЕсли;
	УстановитьСтраницуКода(ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуКода(СтраницаКодаНовая)
	
	Если Элементы.Алгоритмы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтраницаКода <> СтраницаКодаНовая Тогда
		
		СтраницаКода = СтраницаКодаНовая;
		Элементы.СтраницыКода.ТекущаяСтраница = Элементы[СтраницаКода];
		Элементы.Алгоритмы.ТекущийЭлемент = Элементы["АлгоритмыЕсть" + СтраницаКода];
		
	КонецЕсли;
	
	СтраницаПоляКода = ?(СтраницаКода = "КодЗапроса", Элементы.ПолеЗапрос, Элементы.ПолеКод);
	
	Элементы.СтраницыHTMLПоля.ТекущаяСтраница = СтраницаПоляКода;
	
	АлгоритмыОбновитьВсеФлаги(ЭтотОбъект.Алгоритмы);
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоФоновыхЗаданийПриИзменении(Элемент)
	
	Если КоличествоФоновыхЗаданий < 1 Тогда
		КоличествоФоновыхЗаданий = 1;
	КонецЕсли;
	
	ПорцияДанных = Выгрузка.Количество() / КоличествоФоновыхЗаданий;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоФоновыхЗаданийРегулирование(Элемент, Направление, СтандартнаяОбработка)
	КоличествоФоновыхЗаданийПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыАлгоритмы

&НаКлиенте
Процедура АлгоритмыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.УИД = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	УстановитьОтборЗначений();
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыПриИзменении(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмыОбновитьФлагиСтроки(Элемент.ТекущиеДанные);
	УстановитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыКодПриИзменении(Элемент)
	Если Элементы.Алгоритмы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	АлгоритмыОбновитьФлагиСтроки(Элементы.Алгоритмы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыПриАктивизацииСтроки(Элемент)
	Если Не ДокументЗагружен Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийАлгоритм = Элемент.ТекущиеДанные.Уид Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	УстановитьОтборЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыПриАктивизацииЯчейки(Элемент)
	
	Если Не ДокументЗагружен Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле = Элемент.ТекущийЭлемент;
	
	Если Поле = Элементы.АлгоритмыЕстьКодКлиента1С Или Поле = Элементы.АлгоритмыКодКлиента1С Тогда
		НоваяСтраницаКода = "КодКлиента1С";
	ИначеЕсли Поле = Элементы.АлгоритмыЕстьКодСервера1С Или Поле = Элементы.АлгоритмыКодСервера1С Тогда
		НоваяСтраницаКода = "КодСервера1С";
	ИначеЕсли Поле = Элементы.АлгоритмыЕстьКодФоновойОбработки Или Поле = Элементы.АлгоритмыКодФоновойОбработки Тогда
		НоваяСтраницаКода = "КодФоновойОбработки";
	Иначе
		НоваяСтраницаКода = "КодЗапроса";
	КонецЕсли;
	
	Если ТекущееПоле = (НоваяСтраницаКода + Элемент.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтраницуКода(НоваяСтраницаКода);
	
	Если ВебДокументДоступен() Тогда
		ОбновитьТекст();
	КонецЕсли;
	
	ТекущееПоле = НоваяСтраницаКода + Элемент.ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыПередУдалением(Элемент, Отказ)
	УИДы = Новый Соответствие;
	Строки = Элемент.ВыделенныеСтроки;
	Для Каждого Строка Из Строки Цикл
		УИД = ЭтотОбъект.Алгоритмы.НайтиПоИдентификатору(Строка).УИД;
		УИДы.Вставить(УИД, УИД);
	КонецЦикла;
	
	Удаляемые = Новый Массив;
	Для Счетчик = - (ЭтотОбъект.Значения.Количество() - 1) По 0 Цикл
		Значение = ЭтотОбъект.Значения[- Счетчик];
		Если УИДы[Значение.АлгоритмУИД] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Удаляемые.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Удаляемое Из Удаляемые Цикл
		ЭтотОбъект.Значения.Удалить(Удаляемое);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АлгоритмыОбновитьФлагиСтроки(СтрокаАлгоритма)
	СтрокаАлгоритма.ЕстьКодЗапроса = ЗначениеЗаполнено(СтрокаАлгоритма.КодЗапроса);
	СтрокаАлгоритма.ЕстьКодКлиента1С = ЗначениеЗаполнено(СтрокаАлгоритма.КодКлиента1С);
	СтрокаАлгоритма.ЕстьКодСервера1С = ЗначениеЗаполнено(СтрокаАлгоритма.КодСервера1С);
	СтрокаАлгоритма.ЕстьКодФоновойОбработки = ЗначениеЗаполнено(СтрокаАлгоритма.КодФоновойОбработки);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АлгоритмыОбновитьВсеФлаги(Алгоритмы)
	Для Каждого Алгоритм Из Алгоритмы.ПолучитьЭлементы() Цикл
		АлгоритмыОбновитьФлагиСтроки(Алгоритм);
		АлгоритмыОбновитьВсеФлаги(Алгоритм);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыВыгрузка

&НаКлиенте
Процедура ВыгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Выгрузка.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Данные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	ИмяПоля = СтрЗаменить(Поле.Имя, Элемент.Имя, "");
	
	СодержимоеЯчейки = ТекущаяСтрока[ИмяПоля];
	Адрес = "";
	Попытка
		Адрес = ТекущаяСтрока[ИмяПоля + "__СлужебныйРасшифровка__"];
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		СодержимоеЯчейки = ПолучитьЗначениеХЗ(Адрес);
		Сообщить(СодержимоеЯчейки);
	КонецЕсли;
	
	Если СодержимоеЯчейки = "ТаблицаЗначений" И ЗначениеЗаполнено(Адрес) Тогда
		ФормаВложеннойТаблицы = ПолучитьФорму("Обработка.КонсольЗапросов.Форма.ФормаВложеннойТаблицыУпр", Неопределено, ЭтаФорма);
		ФормаВложеннойТаблицы.Заголовок = "Таблица значений: " + ИмяПоля;
		ФормаВложеннойТаблицы.АдресТаблицы = Адрес;
		ФормаВложеннойТаблицы.Открыть();
	Иначе
		Если ТипЗнч(СодержимоеЯчейки) = Тип("Строка") Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтотОбъект);
			ПоказатьВводСтроки(Оповещение, СодержимоеЯчейки,,, Истина);
		Иначе
			ПоказатьЗначение(, СодержимоеЯчейки);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(Значение, ДопПараметры) Экспорт
	Возврат;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеХЗ(адрес)
	
	Если Не ЗначениеЗаполнено(адрес) Тогда
		Возврат адрес;
	КонецЕсли;
	
	ДанныеИзХранилища = ПолучитьИзВременногоХранилища(адрес);
	Если ТипЗнч(ДанныеИзХранилища) = Тип("ТаблицаЗначений") Тогда
		Возврат "ТаблицаЗначений";
	ИначеЕсли ТипЗнч(ДанныеИзХранилища) <> Тип("ХранилищеЗначения") Тогда
		Возврат ДанныеИзХранилища;
	КонецЕсли;
	
	Содержимое = ДанныеИзХранилища.Получить();
	Если ТипЗнч(Содержимое) = Тип("ТаблицаЗначений") Тогда
		ПоместитьВоВременноеХранилище(Содержимое, адрес);
		Содержимое = "ТаблицаЗначений";
	КонецЕсли;
	
	Возврат Содержимое;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузкаОчистить(Команда)
	Выгрузка.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаТипЗначения(Команда)
	Элемент = Элементы.Выгрузка;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяПоля = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "");
	Сообщить(ИмяПоля + ": " + ТипЗнч(Элемент.ТекущиеДанные[ИмяПоля]));
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаПереименоватьПоле(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыЗначения

&НаКлиенте
Процедура ЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование И Алгоритм <> Неопределено Тогда
		Элемент.ТекущиеДанные.АлгоритмУИД = Алгоритм.УИД;
	КонецЕсли;
	Элементы.ЗначенияЗначение.ВыбиратьТип = (Элемент.ТекущиеДанные.Значение = Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Имя) Тогда
			Элемент.ТекущиеДанные.Имя = "Значение" + Формат(Элемент.ТекущаяСтрока, "ЧГ=; ЧН=0");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)
	Значение = Элементы.Значения.ТекущиеДанные;
	Если Значение <> Неопределено Тогда
		Значение.Значение = Неопределено;
		Элемент.ВыбиратьТип = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КомандыОбработкиКода

&НаКлиенте
Функция ТекущийРедактор()
	ТР = ЭтотОбъект.ТекущийЭлемент;
	
	Если Элементы.СтраницыКода.ТекущаяСтраница = Элементы.КодЗапроса Тогда
		Возврат Элементы.ПолеКодЗапроса;
	ИначеЕсли Элементы.СтраницыКода.ТекущаяСтраница = Элементы.КодКлиента1С Тогда
		Возврат Элементы.ПолеКодКлиента1С;
	ИначеЕсли Элементы.СтраницыКода.ТекущаяСтраница = Элементы.КодСервера1С Тогда
		Возврат Элементы.ПолеКодКлиента1С;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура КодЗакомментировать(Команда)
	Редактор = ТекущийРедактор();
	СтрокиДобавитьПрефикс(Редактор.ВыделенныйТекст, "//");
КонецПроцедуры

&НаКлиенте
Процедура КодРаскомментировать(Команда)
	Редактор = ТекущийРедактор();
	Если Редактор.ВыделенныйТекст = "" Тогда
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		Редактор.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		Редактор.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + 1, 1);
	КонецЕсли;
	СтрокиУдалитьПрефикс(Редактор.ВыделенныйТекст, "//");
КонецПроцедуры

&НаКлиенте
Процедура КодФорматироватьЗапрос(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Редактор = ТекущийРедактор();
	ПраваяГраница = СтрДлина(Алгоритм.КодЗапроса) + 1;
	Если ПраваяГраница = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Блок = ПолучитьТекст(Ложь);
	
	Если СтрЧислоВхождений(Блок, "|") = 0 Тогда
		ФорматироватьЗапросДляКода(Блок);
	Иначе
		ФорматироватьЗапросДляВыполнения(Блок);
	КонецЕсли;
	
	Элементы.Алгоритмы.ТекущиеДанные[СтраницаКода] = СокрЛП(Блок);// повторно уберем начальные и конечные пробелы;
	
	ОбновитьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьЗапросДляКода(Блок)
	
	Блок = СтрЗаменить(Блок, Символы.ПС, Символы.ПС + "|");// заменим две двойные кавычки на одну двойную
	
	Блок = СтрЗаменить(Блок, """", """""");// заменим две двойные кавычки на одну двойную
	Блок = """" + Блок + """;";
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьЗапросДляВыполнения(Блок)
	
	Блок = СтрЗаменить(Блок, """""", """");// заменим две двойные кавычки на одну двойную
	Блок = СтрЗаменить(Блок, "|", "");// заменим две двойные кавычки на одну двойную
	
	Если СтрНачинаетсяС(Блок, """") Тогда
		СтрЗаменитьХ(Блок, """", "", 1);
	КонецЕсли;// удалим начальную кавычку
	
	Если СтрЗаканчиваетсяНа(Блок, ";") Тогда
		СтрЗаменитьХ(Блок, ";", "", 1, Истина);
	КонецЕсли;// удалим последнюю пару <";>
	
	Если СтрЗаканчиваетсяНа(Блок, """")
		И НЕ СтрЗаканчиваетсяНа(Блок, """""")
		И СтрЧислоВхождений(Блок, """") % 2 <> 0 Тогда
		СтрЗаменитьХ(Блок, """", "", 1, Истина);
	КонецЕсли;// удалим последнюю <">
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Конструктор = Новый КонструкторЗапроса();
	Конструктор.Текст = СокрЛП(Алгоритм.КодЗапроса);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьТекстЗапроса", ЭтотОбъект, Элементы.Алгоритмы.ТекущиеДанные);
	Конструктор.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗапроса(Текст, Алгоритм) Экспорт
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Алгоритм.КодЗапроса = Текст;
	
	ОбновитьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыЗапроса(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодЗапроса = Алгоритм.КодЗапроса;
	ПараметрыЗапроса = ПараметрыЗапроса(КодЗапроса);
	
	Пропуски = Новый Соответствие;
	Для Каждого Значение Из Значения.НайтиСтроки(Новый Структура("АлгоритмУИД", Алгоритм.УИД)) Цикл
		ПараметрЗапроса = ПараметрыЗапроса[Значение.Имя];
		Если ПараметрЗапроса <> Неопределено Тогда
			Пропуски.Вставить(Значение.Имя, Значение.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Пропуск = Пропуски[ПараметрЗапроса.Ключ];
		Если Пропуск <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = ЭтотОбъект.Значения.Добавить();
		Значение.Имя = ПараметрЗапроса.Ключ;
		Значение.Значение = ПараметрЗапроса.Значение.ПривестиЗначение(Неопределено);
		Значение.АлгоритмУИД = Алгоритм.УИД;
	КонецЦикла;
	УстановитьОтборЗначений();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыЗапроса(КодЗапроса)
	Запрос = Новый Запрос(КодЗапроса);
	НайденныеПараметры = Запрос.НайтиПараметры();
	
	ПараметрыЗапроса = Новый Соответствие;
	Для Каждого Найденыш Из НайденныеПараметры Цикл
		ПараметрыЗапроса.Вставить(Найденыш.Имя, Найденыш.ТипЗначения);
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
КонецФункции

#КонецОбласти

#Область ВыполнениеКода

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	УстановитьСтраницуКода("КодЗапроса");
	ВыполнитьКод("КодЗапроса");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросДоКурсора(Команда)
	УстановитьСтраницуКода("КодЗапроса");
	ВыполнитьКод("КодЗапроса", "ДоКурсора");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакет(Команда)
	УстановитьСтраницуКода("КодЗапроса");
	ВыполнитьКод("КодЗапроса", "ПакетныйЗапрос");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСерверныйКод(Команда)
	УстановитьСтраницуКода("КодСервера1С");
	ВыполнитьКод("КодСервера1С");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСерверныйКодВФоне(Команда)
	ВыполнитьВФонеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКлиентскийКод(Команда)
	УстановитьСтраницуКода("КодКлиента1С");
	ВыполнитьКод("КодКлиента1С");
КонецПроцедуры

&НаКлиенте
Процедура ПримерКода(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПримера =
	"Для Каждого рез из Выгрузка Цикл
	|	Сообщить(рез.Ссылка);
	|КонецЦикла;
	|";
	
	Если СтраницаКода = "КодКлиента1С"
		ИЛИ СтраницаКода = "КодСервера1С" Тогда
		Алгоритм[СтраницаКода] = Алгоритм[СтраницаКода] + ТекстПримера;
	КонецЕсли;
	
	ОбновитьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерЗагрузкиКодаВСписок(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПримера =
	"
	|//ПОИСК ПАРАМЕТРОВ
	|///////////////////////////////////////////////////
	|
	|ИмяПараметра = ""Тест"";									// <- УКАЖИТЕ ИМЯ ПАРАМЕТРА
	|ИмяКолонкиДляЗагрузки = ""Поле001"";	// <- УКАЖИТЕ КОЛОНКУ ВЫГРУКИ ИЗ ТАБЛИЦЫ
	|
	|Отбор = Новый Структура;
	|Отбор.Вставить(""АлгоритмУИД"", ТекущийАлгоритм);
	|Отбор.Вставить(""Имя"", ИмяПараметра);
	|
	|НайденыеПараметры = Значения.НайтиСтроки(Отбор);
	|НайденыйПараметр = НайденыеПараметры[0];
	|///////////////////////////////////////////////////
	|
	|//ИНИЦИАЛИЗАЦИЯ ПАРАМЕТРОВ
	|///////////////////////////////////////////////////
	|
	|Список = Новый СписокЗначений;
	|Список.ЗагрузитьЗначения(Выгрузка.Выгрузить().ВыгрузитьКолонку(ИмяКолонкиДляЗагрузки));
	|
	|НайденыйПараметр.Значение = Список;
	|
	|///////////////////////////////////////////////////";

	Если СтраницаКода = "КодКлиента1С"
		ИЛИ СтраницаКода = "КодСервера1С" Тогда
		Алгоритм[СтраницаКода] = Алгоритм[СтраницаКода] + ТекстПримера;
	КонецЕсли;
	
	ОбновитьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерВФонеНажатие(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено ИЛИ СтраницаКода <> "КодФоновойОбработки" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПримера = "
	|// ..::Этот текст отобразится в КонсолиЗаданий в Наименовании фонового::..
	|// Данный код передается как ""Алгоритм"" в фоновое задание - возвращает текстовый результат обработки
	|// На входе алгоритма ДополнительныеПараметры - Структура,
	|// где есть ключ ""Данные"" - Массив Структур строк ""Результата Запроса""
	|// перехват ошибок и вывод их - необходимо обрабатывать в Алгоритме
	|
	|// Пример: обход Результата и возврат текстового сообщения.
	|// В Данных должна быть Колонка/Свойство ""Cсылка""
	|
	|Результат = """"; //текстовый результат
	|КоличествоЗаписей = ДополнительныеПараметры.Данные.ВГраница();
	|
	|// ДополнительныеПараметры.Данные
	|Для каждого стрДанные из ДополнительныеПараметры.Данные цикл
	|	// Прогресс выполнения
	|	ПроцентОбработано = Окр(ДополнительныеПараметры.Данные.Найти(стрДанные) / КоличествоЗаписей * 100, 0);
	|	Если ПроцентОбработано % 1 = 0 Тогда
	|		ДлительныеОперации.СообщитьПрогресс(ПроцентОбработано);
	|	КонецЕсли;
	|	// Конец Прогресс выполнения
	|
	|	// об = стрДанные.ссылка.ПолучитьОбъект();
	|	попытка
	|		// об.Записать(режимЗаписиДокумента.Проведение);
	|		Результат = Результат + ""
	|		| Проведен "" + стрДанные.Наименование;
	|	исключение
	|		Результат = Результат + ""
	|		| Ошибка: "" + ОписаниеОшибки() + ""
	|		| "" + стрДанные.Наименование;
	|	КонецПопытки;
	|КонецЦикла;
	|
	|// помещаем текстовый результат для отображения на клиенте
	|ПоместитьВоВременноеХранилище(Результат, АдресРезультата);";
	
	Алгоритм[СтраницаКода] = Алгоритм[СтраницаКода] + ТекстПримера;
	
	ОбновитьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод(ВыполнитьКодСоСтраницы, ДополнительныеПараметры = Неопределено)
	
	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	ИначеЕсли СтраницаКода = "КодЗапроса" Тогда
		Выгрузка.Очистить(); Таблицы.Очистить();
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		КонецСтроки = View().getCurrentLine();
		КонецКолонки = View().getCurrentColumn();
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры)
			И ДополнительныеПараметры = "ДоКурсора" Тогда
			View().setSelection(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		КонецЕсли;
		
		ТекстЗапроса = View().selectedText();
		Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = Алгоритм[СтраницаКода];
		КонецЕсли;
		
		ВыгрузитьДанныеНаСервере(ТекстЗапроса, БлокЗначений(ЭтотОбъект.Значения, Алгоритм.УИД));
		
	ИначеЕсли СтраницаКода = "КодКлиента1С" Тогда
		
		Текст = ПолучитьТекст(Истина);
		Результат = ВыполнитьКодНаКлиенте(Текст);
		// Выполнить(Алгоритм[СтраницаКода]);
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОбработатьРезультатВыполнения(Результат);
		
	ИначеЕсли СтраницаКода = "КодСервера1С" Тогда
		
		Текст = ПолучитьТекст(Истина);
		Результат = ВыполнитьКодНаСервере(Текст);
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОбработатьРезультатВыполнения(Результат);
		
	ИначеЕсли СтраницаКода = "КодФоновойОбработки" Тогда
		//!!! ВыполнитьКод1СНаСервере(Алгоритм[СтраницаКода]);
	КонецЕсли;
	
	Элементы.ДанныеВыполненияЗапроса.Заголовок = СтрШаблон("Время: %1 с. Кол. строк: %2", (ОкончаниеВыполнения - НачалоВыполнения) / 1000, Выгрузка.Количество());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруРезультата()
	
	СтруктуруРезультата = Новый Структура();
	СтруктуруРезультата.Вставить("Успешно", Ложь);
	СтруктуруРезультата.Вставить("ИсходнаяСтрока", "");
	СтруктуруРезультата.Вставить("ОписаниеОшибки", "");
	СтруктуруРезультата.Вставить("ОписаниеПеременных", "");
	СтруктуруРезультата.Вставить("АдресХраненияПеременных", "");
	
	Возврат СтруктуруРезультата;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьКодНаКлиенте(Знач Текст)
	Возврат ВыполнитьКодСтраницыНаКлиенте(Текст);
	
КонецФункции

&НаСервере
Функция ВыполнитьКодНаСервере(Знач Текст)
	Возврат ВыполнитьКодСтраницы(Текст);
	
КонецФункции

&НаСервере
Функция ВыполнитьКодСтраницы(Знач Текст)
	
	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	SPd201bf6 = Новый Структура();
	
	Попытка
		Выполнить(Текст);
		RVS6e6c2a.Успешно = Истина;
		АдресПеременных = "";
		Попытка
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(SPd201bf6, АдресПеременных);
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(SPd201bf6);
			КонецЕсли;
			RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
		Исключение
			OS6e6c2a = ИнформацияОбОшибке();
			RVS6e6c2a.ОписаниеПеременных = "";
		КонецПопытки;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ИсходнаяСтрока = OS6e6c2a.ИсходнаяСтрока;
		Если OS6e6c2a.Причина <> Неопределено Тогда
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Причина.Описание;
		Иначе
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Описание;
		КонецЕсли;
	КонецПопытки;
	
	Возврат RVS6e6c2a;
КонецФункции

&НаКлиенте
Функция ВыполнитьКодСтраницыНаКлиенте(Знач Текст)
	
	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	SPd201bf6 = Новый Структура();
	
	Попытка
		Выполнить(Текст);
		RVS6e6c2a.Успешно = Истина;
		АдресПеременных = "";
		Попытка
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(SPd201bf6, АдресПеременных);
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(SPd201bf6);
			КонецЕсли;
			RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
		Исключение
			OS6e6c2a = ИнформацияОбОшибке();
			RVS6e6c2a.ОписаниеПеременных = "";
		КонецПопытки;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ИсходнаяСтрока = OS6e6c2a.ИсходнаяСтрока;
		Если OS6e6c2a.Причина <> Неопределено Тогда
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Причина.Описание;
		Иначе
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Описание;
		КонецЕсли;
	КонецПопытки;
	
	Возврат RVS6e6c2a;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОшибку(ОписаниеОшибки)
	
	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);
	
	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");
	
	Если 0 < ПозицияРазделителя Тогда
		
		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));
		
		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");
		
		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);
		
		Ошибка.НомерСтроки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1), 0);
		Ошибка.НомерКолонки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2), 1);
		
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокуВКоде(Строка)
	
	НомерСтроки = View().findText(Строка);
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Функция ИзвлечьНомерСтрокиИзОписанияОшибки(ОписаниеОшибки)
	
	НомерСтроки = 0;
	ОткрывающаяСкобка = СтрНайти(ОписаниеОшибки, "(");	
	
	Если 0 < ОткрывающаяСкобка Тогда
		
		ЗакрывающаяСкобка = СтрНайти(ОписаниеОшибки, ")", , ОткрывающаяСкобка);
		
		Если 0 < ЗакрывающаяСкобка Тогда
			
			Позиция = Сред(ОписаниеОшибки, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
			Подстроки = СтрРазделить(Позиция, ",");
			
			Попытка
				НомерСтроки = Число(Подстроки[0]);
			Исключение
				НомерСтроки = 0;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполнения(Результат)
	
	CodeView().setCustomCodeLenses("[]");
	
	Если НЕ Результат.Успешно Тогда
		
		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);
		
		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Результат.ОписаниеОшибки);
		КонецЕсли;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		КонецЕсли;
		
		СообщитьПользователю(Ошибка.ТекстОшибки);
		
		Если 0 < НомерСтроки Тогда
			CodeView().markError(НомерСтроки, НомерКолонки);
		КонецЕсли;
		
	Иначе
		
		АдресХраненияПеременных = Результат.АдресХраненияПеременных;
		
		Если ЗначениеЗаполнено(Результат.ОписаниеПеременных) Тогда
			
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				
				CodeView().showVariablesDescription(Результат.ОписаниеПеременных);
				
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				
				CodeView().setCustomHovers(Результат.ОписаниеПеременных);
			
				Если Результат.ОписаниеПеременных <> "{}" Тогда
					CodeView().setCustomCodeLenses("[{""lineNumber"": 1,""column"": 1,""text"": ""Для просмотра значений наведите курсор на переменную""}]");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПолучениеЗначенийПеременныхДляПодсказокПриНаведении

&НаСервереБезКонтекста
Функция ДополнитьСтроку(Знач Результат, СимволовДополнить, Дополнение = " ", Слева = Истина)
	
	Стр = "";
	
	Для Сч = 1 По СимволовДополнить Цикл
		Стр = Стр + Дополнение;
	КонецЦикла;
	
	Возврат ?(Слева, Стр + Результат, Результат + Стр);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылка(Ссылка)
	
	ЭтоСсылка = Ложь;
	
	ТипЗнч = ТипЗнч(Ссылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Массив = СтрРазделить(ПолноеИмя, ".");
		Массив[0] = Массив[0] + "Ссылка";
		ИмяТипа = СтрСоединить(Массив, ".");
		
		Попытка
			ЭтоСсылка = (ТипЗнч = Тип(ИмяТипа));
		Исключение
			ЭтоСсылка = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЭтоСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяОбъектаМетаданных(Ссылка)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Если ОбъектМетаданных <> Неопределено Тогда
		Возврат СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".").Получить(0);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТабличнаяЧасть(Ссылка)
	
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Если Результат <> Неопределено Тогда
		
		Если ОбъектМетаданныхИмеетТЧ(Результат.Родитель().ПолноеИмя()) Тогда
			Возврат Результат.Родитель().ТабличныеЧасти.Найти(Результат.Имя) <> Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСтрокаТабличнойЧасти(Ссылка)
	
	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если Результат <> Неопределено Тогда
		
		Родитель = Результат.Родитель();
		ИмяРодителя = Родитель.ПолноеИмя();
		
		Если ОбъектМетаданныхИмеетТЧ(ИмяРодителя) Тогда
			
			ЧастиИмени = СтрРазделить(ИмяРодителя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			
			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);
			
			Если ТабличнаяЧасть <> Неопределено Тогда
				
				ИмяТипа = СтрШаблон("%1ТабличнаяЧастьСтрока.%2.%3", Имя1, Имя2, ТабличнаяЧасть.Имя);
				
				Попытка
					Возврат (ТипЗнч = Тип(ИмяТипа));
				Исключение
					Возврат Ложь;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЗаписьНабораЗаписей(Ссылка)
	
	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если Результат <> Неопределено Тогда
		
		ПолноеИмя = Результат.ПолноеИмя();
		
		Если 0 < СтрНайти(ПолноеИмя, "Регистр") Или 0 < СтрНайти(ПолноеИмя, "Register") Тогда
			
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			ИмяТипа = СтрШаблон("%1Запись.%2", Имя1, Имя2);
			
			Попытка
				Возврат (ТипЗнч = Тип(ИмяТипа));
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСтрокиТабличнойЧасти(Строка)
	
	Реквизиты = Новый Массив();
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Строка));
	
	Если Результат <> Неопределено Тогда
		
		Родитель = Результат.Родитель();
		
		Если ОбъектМетаданныхИмеетТЧ(Родитель.ПолноеИмя()) Тогда
			
			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);
			
			Реквизиты.Добавить(Новый Структура("Имя", "НомерСтроки"));
			
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				Реквизиты.Добавить(Реквизит);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыНабораЗаписей(Запись)
	
	Реквизиты = Новый Массив();
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Запись));
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого Измерение Из Результат.Измерения Цикл
			Реквизиты.Добавить(Измерение);
		КонецЦикла;
		
		Для Каждого Ресурс Из Результат.Ресурсы Цикл
			Реквизиты.Добавить(Ресурс);
		КонецЦикла;
		
		Для Каждого Реквизит Из Результат.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
		
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМенеджерЗаписиРегистра(Значение)
	
	ЭтоМенеджерЗаписи = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Результат <> Неопределено Тогда
		
		Имя = Результат.ПолноеИмя();
		
		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоМенеджерЗаписи = (Тип("РегистрСведенийМенеджерЗаписи." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоМенеджерЗаписи = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоМенеджерЗаписи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНаборЗаписейРегистра(Значение)
	
	ЭтоНаборЗаписей = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Результат <> Неопределено Тогда
		
		Имя = Результат.ПолноеИмя();
		
		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрСведенийНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрНакопления") = 1 И Метаданные.РегистрыНакопления.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрНакопленияНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрРасчета") = 1 И Метаданные.РегистрыРасчета.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрРасчетаНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрБухгалтери") = 1 И Метаданные.РегистрыБухгалтерии.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрБухгалтерииНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоНаборЗаписей = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоНаборЗаписей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПеречисление(Значение)
	
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	Возврат Результат <> Неопределено И СтрНайти(Результат.ПолноеИмя(), "Перечисление") = 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСсылки(Значение, КешСсылок, htmlTag)
	
	Представление = КешСсылок[Значение];
	
	Если Представление = Неопределено Тогда
		
		Попытка
			Если Не Значение.Пустая() Тогда
				Ссылка = ПолучитьНавигационнуюСсылку(Значение);
				Если htmlTag Тогда
					Представление = СтрШаблон("<a href='%1'>%2</a>", Ссылка, Строка(Значение));
				Иначе
					Представление = СтрШаблон("[%1](%2)", Строка(Значение), Ссылка);
				КонецЕсли;
			Иначе
				Представление = "";
			КонецЕсли;
		Исключение
			Представление = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		КешСсылок[Значение] = Представление;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", Заголовок, Значение.Количество()));
	Индекс = 0;
	
	Для Каждого СтрокаТЗ Из Значение Цикл
		
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);
		
		Для Каждого Колонка Из Значение.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(СтрокаТЗ[Колонка.Имя], Смещение, КешСсылок));
		КонецЦикла;  
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, СтрокаДерева, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	Индекс = 0;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
	
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(Строка[Колонка.Имя], Смещение, КешСсылок));
		КонецЦикла;  
				
		Индекс = Индекс + 1; 
		
		МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Строка, Смещение + 1, КешСсылок));
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДереваЗначений(Дерево, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", "Дерево значений", Дерево.Строки.Количество()));
	МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Дерево, Смещение, КешСсылок));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок)
	
	Таблица = Значение.Владелец();
	
	Представление = "**Строка таблицы значений:**" + Символы.ПС;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Представление = Представление + Символы.ПС;
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		Представление = Представление + Маркер + Колонка.Имя + ": ";
		Представление = Представление + ПолучитьПредставлениеПеременной(Значение[Колонка.Имя], Смещение, КешСсылок);
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок)
	
	ТипЗнч = ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	МассивСтрок = Новый Массив();
	
	МассивСтрок.Добавить(СтрШаблон("**%1:**", ТипЗнч));
	МассивСтрок.Добавить(Символы.ПС);
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Для Каждого Измерение Из ОбъектМетаданных.Реквизиты Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Для Каждого Измерение Из ОбъектМетаданных.Ресурсы Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийМассива(МассивСписок, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	
	ТипЗнч = ТипЗнч(МассивСписок);
	ЭтоМассив = (ТипЗнч = Тип("Массив"));
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч, МассивСписок.Количество()) + Символы.ПС);
	Индекс = 0;
	
	Для Каждого Значение Из МассивСписок Цикл
		
		Маркер = ДополнитьСтроку("- (" + Индекс + ") ", Смещение * 4, " ");
		
		Если ЭтоМассив Тогда
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение, Смещение, КешСсылок));
		Иначе
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение.Значение, Смещение, КешСсылок));
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЭлементаСпискаЗначений(ЭлементСписка, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Элемент списка значений**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(ЭлементСписка.Значение, Смещение, КешСсылок));
	
	Представление = ЭлементСписка.Представление;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = Строка(ЭлементСписка.Значение);
	КонецЕсли;
	
	МассивСтрок.Добавить(Маркер + "Представление: " + Представление);
	МассивСтрок.Добавить(Маркер + "Пометка: " + ЭлементСписка.Пометка);
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКлючаЗначения(КлючЗначение, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Ключ и значение**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Ключ: " + КлючЗначение.Ключ);
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(КлючЗначение.Значение, Смещение, КешСсылок));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч(Значение), Значение.Количество()));
		
	Для Каждого Стр Из Значение Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Стр.Ключ + ": " + ПолучитьПредставлениеПеременной(Стр.Значение, Смещение, КешСсылок));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЗапроса(Запрос, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Запрос**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Не установлен");
	Иначе
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Установлен");
	КонецЕсли;
	
	ПредставлениеПараметров = ПолучитьПредставлениеСтруктурыСоответствия(Запрос.Параметры, Смещение + 1, КешСсылок);
	МассивСтрок.Добавить(ПредставлениеПараметров);
	
	МаркерТекста = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
	МассивСтрок.Добавить(Маркер + "Текст: " + Символы.ПС + МаркерТекста + Запрос.Текст);
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременной(Значение, Знач Смещение, КешСсылок)
	
	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	
	Смещение = Смещение + 1;
	
	Если ТипЗнч = Тип("Число") Или
		ТипЗнч = Тип("Строка") Или
		ТипЗнч = Тип("Булево") Или
		ТипЗнч = Тип("Дата") Тогда
		Представление = Строка(Значение);
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Представление = "Null";
	ИначеЕсли ТипЗнч = Тип("Структура") Или
		ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("Массив") Или
		ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = ПолучитьПредставлениеСпискаЗначенийМассива(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = ПолучитьПредставлениеКлючаЗначения(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = ПолучитьПредставлениеЭлементаСпискаЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Заголовок = НСтр("en = 'Value table'; ru = 'Таблица значений'");
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = ПолучитьПредставлениеДереваЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Представление = ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Представление = Строка(Значение);
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = ПолучитьПредставлениеЗапроса(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Ложь);
	Иначе
		Представление = Строка(Значение);
		Если ПустаяСтрока(Представление) Тогда
			Представление = Строка(ТипЗнч);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(ЗначенияПеременных)
	
	Описание = Новый Структура();
	КешСсылок = Новый Соответствие();
	
	Для Каждого Обход ИЗ ЗначенияПеременных Цикл
		Представление = ПолучитьПредставлениеПеременной(Обход.Значение, -1, КешСсылок);
		Описание.Вставить(Обход.Ключ, Представление);
	КонецЦикла;
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляВыводаВТабло

&НаСервереБезКонтекста
Функция ПолучитьКартинкуДляПредставленияСсылки(Ссылка)
	
	ИмяОбъекта = ПолучитьИмяОбъектаМетаданных(Ссылка);
	
	Имена = Новый Соответствие();
	Имена.Вставить("Справочник", "catalog");
	Имена.Вставить("Catalog", "catalog");
	Имена.Вставить("Документ", "document");
	Имена.Вставить("Document", "document");
	Имена.Вставить("БизнесПроцесс", "bprocess");
	Имена.Вставить("BusinessProcess", "bprocess");
	Имена.Вставить("Задача", "task");
	Имена.Вставить("Task", "task");
	
	Картинка = Имена[ИмяОбъекта];
	
	Если Картинка = Неопределено Тогда
		Картинка = "structure";
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьКДанным, КешСсылок)
	
	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	Картинка = "";
	Класс = "";
	
	Если ТипЗнч = Тип("Число") Тогда
		Представление = Строка(Значение);
		Картинка = "int";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Строка") Тогда
		Представление = Строка(Значение);
		Картинка = "string";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Булево") Тогда
		Представление = Строка(Значение);
		Картинка = "boolean";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Дата") Тогда
		Картинка = "date";
		Представление = Строка(Значение);
		Класс = "final";
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Картинка = "null";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("УникальныйИдентификатор") Тогда
		Представление = Строка(Значение);
		Картинка = "uuid";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ДвоичныеДанные") Тогда
		Картинка = "binary";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Картинка") Тогда
		Картинка = "picture";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Структура") Или
		ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("Массив") Или
		ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Картинка = "table";
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Строки.Количество());
		Картинка = "tree";
		Если Значение.Строки.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
		Представление = "";
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Картинка = "storage";
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "query";
	ИначеЕсли ТипЗнч = Тип("МенеджерВременныхТаблиц") Тогда
		Представление = "";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
		Представление = СтрШаблон("Движения (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("ТабличныйДокумент") Тогда
		Картинка = "tabular";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ТекстовыйДокумент") Или
		ТипЗнч = Тип("ЧтениеТекста") Или
		ТипЗнч = Тип("ЧтениеXML") Или
		ТипЗнч = Тип("ЧтениеJSON") Или
		ТипЗнч = Тип("ЧтениеHTML") Или
		ТипЗнч = Тип("ЗаписьJSON") Или
		ТипЗнч = Тип("ЗаписьXML") Или
		ТипЗнч = Тип("ЗаписьТекста") Или
		ТипЗнч = Тип("ЧтениеZipФайла") Или
		ТипЗнч = Тип("Файл") Тогда
		Картинка = "text";
		Класс = "final";
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
		Картинка = "enum";
		Класс = "final";
	ИначеЕсли ЭтоСтрокаТабличнойЧасти(Значение) Тогда
		Представление = "";
		Картинка = "table";
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = СтрШаблон("Табличная часть (%1)", Значение.Количество());
		Картинка = "table";
	ИначеЕсли ЭтоЗаписьНабораЗаписей(Значение) Тогда
		Картинка = "table";
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = СтрШаблон("Набор записей (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Картинка = "structure";
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Истина);
		Если СтрНайти(Представление, "</a>") Тогда
			Представление = СтрЗаменить(Представление, """", "");
			Представление = СтрЗаменить(Представление, Символы.Таб, "");
		КонецЕсли;
		Картинка = ПолучитьКартинкуДляПредставленияСсылки(Значение);
	Иначе
		Представление = Строка(Значение);
		Класс = "final";
	КонецЕсли;
	
	Переменная = Новый Структура();
	Переменная.Вставить("label", Имя);
	Переменная.Вставить("value", Представление);
	Переменная.Вставить("type" , Строка(ТипЗнч));
	Переменная.Вставить("path" , ПутьКДанным);
	Переменная.Вставить("class", Класс);
	
	Если ЗначениеЗаполнено(Картинка) Тогда
		Переменная.Вставить("icon", Картинка + ".png");
	КонецЕсли;
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйИдентификаторПеременной()
	
	Возврат "var_" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСсылочнойПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	ОбъектМетаданных = Ссылка.Метаданные();
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	ЗначениеРеквизита = Ссылка.УникальныйИдентификатор();
	ПутьРеквизита = ПутьКДанным + ".УникальныйИдентификатор";
	ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, "УникальныйИдентификатор", ПутьРеквизита, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмяОбъектаМетаданных) Тогда
		
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя <> "Ссылка" Тогда
				ЗначениеРеквизита = Ссылка[Реквизит.Имя];
				ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
				ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
				ИдентификаторПеременной = НовыйИдентификаторПеременной();
				ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ЗначениеРеквизита = Ссылка[Реквизит.Имя];
		ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	КонецЦикла;
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмяОбъектаМетаданных) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ЗначениеРеквизита = Ссылка[ТабличнаяЧасть.Имя];
			ПутьРеквизита = ПутьКДанным + "." + ТабличнаяЧасть.Имя;
			ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, ТабличнаяЧасть.Имя, ПутьРеквизита, КешСсылок);
			ИдентификаторПеременной = НовыйИдентификаторПеременной();
			ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТаблицыЗначений(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЗ, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТаблицыЗначений(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Колонки = СтрокаТаблицы.Владелец().Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаТаблицы[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТабличнойЧасти(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыСтрокиТабличнойЧасти(СтрокаТЧ);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = СтрокаТЧ[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗаписиНабораЗаписей(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеДереваЗначений(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + ".Строки[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиДереваЗначений(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Колонки = СтрокаДерева.Владелец().Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаДерева[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Если 0 < СтрокаДерева.Строки.Количество() Тогда
		ПутьСтроки = ПутьКДанным + ".Строки";
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева.Строки, "Строки", ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЕсли;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииСтрокДереваЗначений(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСоответствияСтруктуры(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ЭтоСоответствие = (ТипЗнч(Соответствие) = Тип("Соответствие"));
	ДанныеПеременной = Новый Структура();
	
	Для Каждого Обход Из Соответствие Цикл
		
		Если ЭтоСоответствие Тогда
			ПутьЗначения = ПутьКДанным + "[&quote;" + Обход.Ключ + "&quote;]";
		Иначе
			ПутьЗначения = ПутьКДанным + "." + Обход.Ключ;
		КонецЕсли;
		
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
		
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМассива(Массив, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Массив, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Значение Из Массив Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКлючаИЗначения(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Ключ";
	Имя = "Ключ";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Ключ, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЭлементаСпискаЗначений(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Пометка";
	Имя = "Пометка";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Пометка, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Представление";
	Имя = "Представление";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Представление, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСпискаЗначений(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Обход Из СписокЗначений Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииДвижений(Движения, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Движения, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Движение Из Движения Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Движение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМенеджераЗаписейРегистра(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗапроса(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Текст";
	Имя = "Текст";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Текст, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Параметры";
	Имя = "Параметры";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Параметры, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".МенеджерВременныхТаблиц";
	Имя = "МенеджерВременныхТаблиц";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.МенеджерВременныхТаблиц, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеХранилищаЗначения(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Данные = ХранилишеЗначения.Получить();
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	Путь = ПутьКДанным + ".Получить()";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Данные, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеХранилища = Новый Структура(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеХранилища);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресХраненияПеременных);
	ХранилищеПеременных = Данные.ХранилищеПеременных;
	КешСсылок = Данные.КэшСсылок;
	
	Попытка
		
		Описание = Неопределено;
		Путь = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИдентификаторПеременной);
		Путь = СтрЗаменить(Путь, "&quote;", """");
		ЗначениеПеременной = Вычислить("ХранилищеПеременных." + Путь);
		Путь = СтрЗаменить(Путь, """", "&quote;");
		ТипЗнч = ТипЗнч(ЗначениеПеременной);
		
		Если ТипЗнч = Тип("ТаблицаЗначений") Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
			Описание = ПолучитьОписаниеДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
			Описание = ПолучитьОписаниеКоллекцииСтрокДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Соответствие") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Массив") Тогда
			Описание = ПолучитьОписаниеМассива(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Структура") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
			Описание = ПолучитьОписаниеКлючаИЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СписокЗначений") Тогда
			Описание = ПолучитьОписаниеСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
			Описание = ПолучитьОписаниеЭлементаСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
			Описание = ПолучитьОписаниеЗапроса(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
			Описание = ПолучитьОписаниеКоллекцииДвижений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
			Описание = ПолучитьОписаниеХранилищаЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСсылка(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСсылочнойПеременной(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСтрокаТабличнойЧасти(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСтрокиТабличнойЧасти(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоТабличнаяЧасть(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоЗаписьНабораЗаписей(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеЗаписиНабораЗаписей(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоНаборЗаписейРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоМенеджерЗаписиРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеМенеджераЗаписейРегистра(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		КонецЕсли;
		
		Если Описание <> Неопределено Тогда
			Результат = Новый Структура(ИдентификаторПеременной, Описание);
			Запись = Новый ЗаписьJSON();
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Результат);
			Возврат Запись.Закрыть();
		Иначе
			ВызватьИсключение("Неизвестный тип переменной");
		КонецЕсли;
		
		Данные.КэшСсылок = КешСсылок;
		ПоместитьВоВременноеХранилище(Данные, АдресХраненияПеременных);
		
	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременныхДляВыводВТабло(ЗначенияПеременных, АдресХраненияПеременных)
	
	Описание = Новый Структура();
	КешСсылок = Новый Соответствие();
	ХранилищеПеременных = Новый Структура();
	
	Для Каждого Обход ИЗ ЗначенияПеременных Цикл
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		Переменная = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, "", КешСсылок);
		Описание.Вставить(ИдентификаторПеременной, Переменная);
		ХранилищеПеременных.Вставить(ИдентификаторПеременной, Обход.Значение);
	КонецЦикла;
	
	Данные = Новый Структура();
	Данные.Вставить("ХранилищеПеременных", ХранилищеПеременных);
	Данные.Вставить("КэшСсылок", КешСсылок);
	
	АдресХраненияПеременных = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор());
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ФоноваяОбработкаЗначений

&НаКлиенте
Процедура ВыполнитьВФонеНаСервере()
	
	Если Выгрузка.Количество() = 0 Тогда
		Сообщить("нечего обрабатывать!");
		Возврат;
	КонецЕсли;
	Если ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		Сообщить("Только клиент-сервер; пропущено!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задания) Тогда
		Сообщить("Идет выполнение предыдущего нажатия... Дождитесь выполнения или отмените выполнение");
		Возврат;
	КонецЕсли;
	
	Задания = Новый Массив;
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные.КодФоновойОбработки;
	ИмяПроцедуры = "ОбщегоНазначенияПереопределяемый.ВыполнитьВБезопасномРежиме";
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	// указываем необходимость вывода прогресса состояния
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	// указываем интервал обновления состояния в секундах, если не указать,
	// то интервал будет увеличиваться при каждой итерации в 1.4 раза.
	ПараметрыОжидания.Интервал = 2;
	
	МассивПорций = ПолучитьМассивПорций();
	Для Каждого Порция Из МассивПорций Цикл
		
		УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор;
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("Алгоритм", Алгоритм);// Алгоритм
		ПараметрыОбработки.Вставить("ДополнительныеПараметры", Новый Структура("Данные", Порция));// ДополнительныеПараметры
		Если ОтключитьБезопасныйРежим Тогда
			ПараметрыОбработки.Вставить("ОтключитьБезопасныйРежим");
		КонецЕсли;
		
		ДлительнаяОперация = ЗапуститьДлительнуюОперацию(УникальныйИдентификаторЗадания, ПараметрыОбработки);
		ДлительнаяОперация.Вставить("ВыводитьПрогрессВыполнения", Ложь);
		ДлительнаяОперация.Вставить("ВыводитьСообщения", Истина);
		ДлительнаяОперация.Вставить("ПараметрыОбработки", ПараметрыОбработки);
		
		Задания.Добавить(ДлительнаяОперация);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("Подключаемый_ПроверитьВыполнениеЗаданий", ЭтотОбъект, ДлительнаяОперация),
			ПараметрыОжидания);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьВыполнениеВФонеНажатие(Команда)
	Если Не ЗначениеЗаполнено(Задания) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииВызовСервера.ОперацииВыполнены(Задания, Новый Массив);
	Задания = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьДлительнуюОперацию(УникальныйИдентификаторЗадания, ПараметрыОбработки)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторЗадания);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПараметрыОбработки.Алгоритм;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("ОбщегоНазначенияПереопределяемый.ВыполнитьВБезопасномРежиме",
	ПараметрыОбработки,
	ПараметрыВыполнения);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПорций(Разделитель = "")
	
	МассивПорций = Новый Массив;
	ТаблицаСДанными = РеквизитФормыВЗначение("Выгрузка");
	
	КоличествоФоновых = КоличествоФоновыхЗаданий;
	
	Порция = Цел(ТаблицаСДанными.Количество() / (КоличествоФоновых)) + 1;
	Сообщить("Порция данных для 1 фонового = " + Порция);
	
	ТекПорция = Новый массив;
	
	нн = 1;
	Пока нн <= ТаблицаСДанными.Количество() Цикл
		
		Значение = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаСДанными[нн - 1]);
		
		ТекПорция.Добавить(Значение);
		
		Если нн % Порция = 0 Тогда
			
			МассивПорций.Добавить(ТекПорция);
			
			ТекПорция = Новый массив;
			
		КонецЕсли;
		
		нн = нн + 1;
		
	КонецЦикла;
	
	Если ТекПорция.Количество() > 0 Тогда
		
		МассивПорций.Добавить(ТекПорция);
		
	КонецЕсли;
	
	Возврат МассивПорций;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданий(Результат, ДополнительныеПараметры) Экспорт
	Перем ПараметрыОжидания;

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Интервал = 2;
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		// Перезапуск по аварийному завершению
		Если СтрЧислоВхождений(Результат.ПодробноеПредставлениеОшибки, "Аварийно") > 0 Тогда
	
			Для Каждого Задание Из Задания Цикл
				
				Если Задание.АдресРезультата <> Результат.АдресРезультата Тогда
					Продолжить;
				КонецЕсли;
				
				Сообщить("Запущено новое фоновое взамен утерянного №" + (Задания.Найти(Задание) + 1));
		
				УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор();
				Задание = ЗапуститьДлительнуюОперацию(УникальныйИдентификаторЗадания, Задание.ПараметрыОбработки);
				
				ДлительныеОперацииКлиент.ОжидатьЗавершение(
					Задание,
					Новый ОписаниеОповещения("Подключаемый_ПроверитьВыполнениеЗаданий", ЭтотОбъект, Задание),
					ПараметрыОжидания);
				
				Возврат;
				
			КонецЦикла;
		
		КонецЕсли;
		Возврат;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		// обрабатываем результат
		ОбработатьРезультатНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого Задание Из Задания Цикл
		Если Задание.АдресРезультата <> Результат.АдресРезультата Тогда
			Продолжить;
		КонецЕсли;
		
		Задания.Удалить(Задания.Найти(Задание));
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатНаСервере(Результат, ДополнительныеПараметры)
	
	Если НЕ Результат.Свойство("АдресРезультата") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзХранилища = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Сообщить("" + ДанныеИзХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузитьДанныеНаСервере

&НаСервере
Процедура ВыгрузитьДанныеНаСервере(КодЗапроса, ПараметрыЗапроса = Неопределено)
	
	Запрос = Новый Запрос(КодЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	пРезультат = Новый ТаблицаЗначений;
	
	Сч = 0;
	Для Каждого стрРезультатПакет Из РезультатПакет Цикл
		Если СтрРезультатПакет.Колонки.Количество() = 1
			И СтрРезультатПакет.Колонки.Найти("Количество") <> Неопределено Тогда
			
			ТаблицаЗапроса = Запрос.МенеджерВременныхТаблиц.Таблицы[Сч];
			Данные = ТаблицаЗапроса.ПолучитьДанные();
			
			НоваяСтрока = Таблицы.Добавить();
			НоваяСтрока.ИмяТаблицы = ТаблицаЗапроса.ПолноеИмя;
			НоваяСтрока.РезультатЗапроса = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
			НоваяСтрока.Количество = Данные.Выгрузить().Количество();
			
			Сч = Сч + 1;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблицы.Добавить();
		НоваяСтрока.ИмяТаблицы = "РЕЗУЛЬТАТ" + РезультатПакет.Найти(стрРезультатПакет);
		НоваяСтрока.РезультатЗапроса = ПоместитьВоВременноеХранилище(РезультатПакет[РезультатПакет.Найти(стрРезультатПакет)], Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
	Элементы.Таблицы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ЭтоДерево = ПроверитьВозможностьВыводаДерева(РезультатПакет[РезультатПакет.Количество() - 1], КодЗапроса, пРезультат);
	
	Если ЭтоДерево Тогда
		ИмяТаблицыРезультата = "ВыгрузкаДерево";
		Результат = РезультатПакет[РезультатПакет.Количество() - 1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ИмяТаблицыРезультата = "Выгрузка";
		Результат = РезультатПакет[РезультатПакет.Количество() - 1].Выгрузить();
	КонецЕсли;
	
	ОбработатьРезультатЗапроса(Результат);
	
	ПодготовитьКолонкиТаблицы(ИмяТаблицыРезультата, Результат.Колонки);
	ВыгрузитьРезультат(ИмяТаблицыРезультата, Результат);
	ПронумероватьСтроки(Выгрузка);
	
	ОбновитьФорму(ИмяТаблицыРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму(ИмяТаблицыРезультата)
	Элементы.Выгрузка.Видимость = ИмяТаблицыРезультата = "Выгрузка";
	Элементы.ВыгрузкаДерево.Видимость = ИмяТаблицыРезультата = "ВыгрузкаДерево";
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблиц = Таблицы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ОтобразитьРезультатВременнойТаблицы(СтрокаТаблиц.РезультатЗапроса, Элементы.Алгоритмы.ТекущиеДанные.КодЗапроса);
	ПозиционироватьВТекстеИмяТаблицы(СтрокаТаблиц.ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ПозиционироватьВТекстеИмяТаблицы(ИмяТаблицы)
	
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяТаблицы, "РЕЗУЛЬТАТ") Тогда
		НачальнаяПозиция = СтрДлина(Алгоритм["КодЗапроса"]) - 1;
		КонечнаяПозиция = НачальнаяПозиция;
	Иначе
		НачальнаяПозиция = View().findText("ПОМЕСТИТЬ " + ИмяТаблицы);
		КонечнаяПозиция = НачальнаяПозиция + СтрДлина(ИмяТаблицы);
	КонецЕсли;
	
	View().setSelection(НачальнаяПозиция, 0, НачальнаяПозиция, 0);
	
	ТекущийЭлемент = Элементы.ПолеHTML;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатВременнойТаблицы(АдресТаблицы, КодЗапроса)
	
	Результат = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	ОчиститьТаблицы();
	
	пРезультат = Новый ТаблицаЗначений;
	ЭтоДерево = ПроверитьВозможностьВыводаДерева(Результат, КодЗапроса, пРезультат);
	
	Если ЭтоДерево Тогда
		ИмяТаблицыРезультата = "ВыгрузкаДерево";
		Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ИмяТаблицыРезультата = "Выгрузка";
		Результат = Результат.Выгрузить();
	КонецЕсли;
	
	ОбработатьРезультатЗапроса(Результат);
	
	ПодготовитьКолонкиТаблицы(ИмяТаблицыРезультата, Результат.Колонки);
	ВыгрузитьРезультат(ИмяТаблицыРезультата, Результат);
	ПронумероватьСтроки(Выгрузка);
	
	ОбновитьФорму(ИмяТаблицыРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицы()
	
	Если Выгрузка.Количество() > 0 Тогда
		тзРезультат = РеквизитФормыВЗначение("Выгрузка");
		Для Каждого колонка Из тзРезультат.Колонки Цикл
			Если Найти(колонка.Имя, "__СлужебныйРасшифровка__") <> 0 Тогда
				Для Каждого строкаТЗ Из тзРезультат Цикл
					Если ЗначениеЗаполнено(строкаТЗ[колонка.Имя]) Тогда
						УдалитьИзВременногоХранилища(строкаТЗ[колонка.Имя]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВыгрузкаДерево.ПолучитьЭлементы().Количество() > 0 Тогда
		тзРезультат = РеквизитФормыВЗначение("ВыгрузкаДерево");
		Для Каждого колонка Из тзРезультат.Колонки Цикл
			Если Найти(колонка.Имя, "__СлужебныйРасшифровка__") <> 0 Тогда
				Для Каждого строкаОписания Из тзРезультат Цикл
					строкаТЗ = ВыгрузкаДерево.НайтиПоИдентификатору(строкаОписания.СтрокаДерева);
					Если ЗначениеЗаполнено(строкаТЗ[колонка.Имя]) Тогда
						УдалитьИзВременногоХранилища(строкаТЗ[колонка.Имя]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//
	//Если Выгрузка.Количество() = 0 Тогда
	// Возврат;
	//КонецЕсли;
	//
	//тзРезультат = РеквизитФормыВЗначение("Выгрузка");
	//Для каждого колонка Из тзРезультат.Колонки Цикл
	// Если Найти(колонка.Имя,"__СлужебныйРасшифровка__") = 0 Тогда
	// Продолжить;
	// КонецЕсли;
	// Для каждого строкаТЗ Из тзРезультат Цикл
	// Если ЗначениеЗаполнено(строкаТЗ[колонка.Имя]) Тогда
	// УдалитьИзВременногоХранилища(строкаТЗ[колонка.Имя]);	
	// КонецЕсли;
	// КонецЦикла;
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыгрузитьДанныеНаСервере(КодЗапроса, ПараметрыЗапроса = Неопределено)
	Запрос = Новый Запрос(КодЗапроса);
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ИмяТаблицыРезультата = "Выгрузка";
	ПодготовитьКолонкиТаблицы(ИмяТаблицыРезультата, Результат.Колонки);
	Выгрузка.Загрузить(Результат.Выгрузить());
	ПронумероватьСтроки(Выгрузка);
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ВыполнитьКод1СНаСервере(КодСервера1С, ПараметрыКода = Неопределено)
	Результат = Неопределено;
	Выполнить(КодСервера1С);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияАлгоритма(Алгоритмы, ИмяАлгоритма, Значения)
	Отбор = Новый Структура("Имя", ИмяАлгоритма);
	
	Строки = Алгоритмы.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Возврат БлокЗначений(Значения, Строки[0].УИД);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция БлокЗначений(Значения, АлгоритмУИД)
	БлокЗначений = Новый Соответствие;
	Для Каждого Значение Из Значения.НайтиСтроки(Новый Структура("АлгоритмУИД", АлгоритмУИД)) Цикл
		БлокЗначений.Вставить(Значение.Имя, Значение.Значение);
	КонецЦикла;
	Возврат БлокЗначений;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодАлгоритма(Алгоритмы, ИмяАлгоритма, СтраницаКода)
	Отбор = Новый Структура("Имя", ИмяАлгоритма);
	
	Строки = Алгоритмы.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	КодАлгоритма = Строки[0][СтраницаКода];
	Если Не ЗначениеЗаполнено(КодАлгоритма) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат КодАлгоритма;
КонецФункции

#КонецОбласти

#Область РаботаСоСтроками

&НаКлиентеНаСервереБезКонтекста
Процедура СтрокиДобавитьПрефикс(Блок, Префикс)
	БлочныйПрефикс = Символы.ПС + Префикс;
	
	ЧислоСтрок = СтрЧислоСтрок(Блок);
	Если ЧислоСтрок > 1 Тогда
		ДобавлятьПС = (Прав(Блок, 1) = Символы.ПС);
		Блок = Префикс + СтрЗаменить(СокрП(Блок), Символы.ПС, БлочныйПрефикс);
		Если ДобавлятьПС Тогда
			Блок = Блок + Символы.ПС;
		КонецЕсли;
	ИначеЕсли ЧислоСтрок = 1 Тогда
		Блок = Префикс + Блок;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СтрокиУдалитьПрефикс(Блок, Префикс, СдвинутьВлево = Ложь)
	ПереводСтроки = ?(Прав(Блок, 1) = Символы.ПС, Символы.ПС, "");
	ДлинаПрефикса = СтрДлина(Префикс);
	
	ЧислоСтрок = СтрЧислоСтрок(Блок);
	Если ЧислоСтрок > 1 Тогда
		НовыйБлок = "";
		Для ИндексСтроки = 1 По ЧислоСтрок Цикл
			СтрокаБлока = СтрПолучитьСтроку(Блок, ИндексСтроки);
			
			НачалоПрефикса = Найти(СтрокаБлока, Префикс);
			СтрокаДоПрефикса = Лев(СтрокаБлока, НачалоПрефикса - 1);
			Если Не ЗначениеЗаполнено(СтрокаДоПрефикса) И НачалоПрефикса > 0 Тогда
				СтрокаБлока = ?(СдвинутьВлево, "", СтрокаДоПрефикса) + Сред(СтрокаБлока, НачалоПрефикса + ДлинаПрефикса);
			КонецЕсли;
			
			Если ИндексСтроки < ЧислоСтрок Тогда
				НовыйБлок = НовыйБлок + СтрокаБлока + Символы.ПС;
			Иначе
				НовыйБлок = НовыйБлок + СтрокаБлока + ПереводСтроки;
			КонецЕсли;
		КонецЦикла;
		Блок = НовыйБлок;
	ИначеЕсли ЧислоСтрок = 1 Тогда
		СтрокаБлока = Блок;
		
		НачалоПрефикса = СтрНайти(СтрокаБлока, Префикс);
		СтрокаДоПрефикса = Лев(СтрокаБлока, НачалоПрефикса - 1);
		Если Не ЗначениеЗаполнено(СтрокаДоПрефикса) И НачалоПрефикса > 0 Тогда
			СтрокаБлока = ?(СдвинутьВлево, "", СтрокаДоПрефикса) + Сред(СтрокаБлока, НачалоПрефикса + ДлинаПрефикса);
		КонецЕсли;
		
		Блок = СтрокаБлока;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрЗаменитьХ(Блок, Поиск, Замена, ЧислоЗамен = 0, СКонца = Ложь)
	Если Не СКонца И ЧислоЗамен = 0 Тогда
		Возврат СтрЗаменить(Блок, Поиск, Замена);
	КонецЕсли;
	
	Направление = ?(СКонца = Истина, НаправлениеПоиска.СКонца, НаправлениеПоиска.СНачала);
	СделатьЗамен = ?(ЧислоЗамен = 0, СтрЧислоВхождений(Блок, Поиск), ЧислоЗамен);
	ДлинаВырезки = СтрДлина(Поиск) + 1;
	
	ВыполненоЗамен = 0;
	Позиция = СтрНайти(Блок, Поиск, Направление) - 1;
	Пока Позиция >= 0 И ВыполненоЗамен < СделатьЗамен Цикл
		Блок = Лев(Блок, Позиция) + Сред(Блок, Позиция + ДлинаВырезки);
		ВыполненоЗамен = ВыполненоЗамен + 1;
		Позиция = СтрНайти(Блок, Поиск, Направление) - 1;
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФайлов

&НаКлиенте
Процедура ФайлСохранить(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если (Команда = Команды.ФайлСохранитьКак) Или Не ЗначениеЗаполнено(Объект.ПолноеИмяФайла) Тогда
		ПоказатьСохранениеАлгоритмов();
	Иначе
		СохранитьФайлАлгоритмов(Объект.ПолноеИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСохранениеАлгоритмов()
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = Объект.ПолноеИмяФайла;
	Диалог.Фильтр = НСтр("ru='Алгоритмы 1С (*.a1c)|*.a1c';en='Algorithms 1C (*.a1c)|*.a1c'");
	
	Оповещение = Новый ОписаниеОповещения("СохранитьФайлАлгоритмов", ЭтотОбъект, Истина);
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлАлгоритмов(ИмяФайла, Оповещение = Ложь) Экспорт
	Если ИмяФайла = Неопределено Или (Оповещение И ИмяФайла.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПолноеИмяФайла = ?(Оповещение, ИмяФайла[0], ИмяФайла);
	ЗаписатьАлгоритмыВФайл(Объект.ПолноеИмяФайла);
	
	ЭтотОбъект.Модифицированность = Ложь;
	УстановитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура ФайлНовый(Команда)
	Если ЭтотОбъект.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросПродолжения", ЭтаФорма, "НОВЫЙ");
		ТекстВопроса = НСтр(
		 "en='Current changes will be lost. Create new algorithms file?';"
		 "ru='Изменения текущих алгоритмов будут утеряны. Продолжить создание нового файла алгоритмов?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		НовыйФайлАлгоритмов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайлАлгоритмов()
	ЭтотОбъект.Алгоритмы.Очистить();
	ЭтотОбъект.Значения.Очистить();
	
	Объект.ПолноеИмяФайла = "";
	Алгоритм = Неопределено;
	
	ЭтотОбъект.Модифицированность = Ложь;
	УстановитьСтраницуКода("КодЗапроса");
КонецПроцедуры

&НаКлиенте
Процедура ФайлОткрыть(Команда)
	Если ЭтотОбъект.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросПродолжения", ЭтаФорма, "ОТКРЫТЬ");
		ТекстВопроса = НСтр(
		 "en='Current changes will be lost. Open another algorithms file?';"
		 "ru='Изменения текущих алгоритмов будут утеряны. Продолжить открытие другого файла алгоритмов?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПоказатьОткрытиеАлгоритмов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОткрытиеАлгоритмов()
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = Объект.ПолноеИмяФайла;
	Диалог.Фильтр = НСтр("ru='Алгоритмы 1С (*.a1c)|*.a1c';en='Algorithms 1C (*.a1c)|*.a1c'");
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФайлАлгоритмов", ЭтотОбъект, Истина);
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлАлгоритмов(ИмяФайла, Оповещение = Ложь) Экспорт
	Если ИмяФайла = Неопределено Или (Оповещение И ИмяФайла.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПолноеИмяФайла = ?(Оповещение, ИмяФайла[0], ИмяФайла);
	ПрочитатьАлгоритмыИзФайла(Объект.ПолноеИмяФайла);
	
	ЭтотОбъект.Модифицированность = Ложь;
	УстановитьСтраницуКода("КодЗапроса");
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЧтениеАлгоритмов

&НаКлиенте
Процедура ПрочитатьАлгоритмыИзФайла(ПолноеИмяФайла)
	ЭтотОбъект.Алгоритмы.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.Значения.Очистить();
	
	Поток = Новый ЧтениеXML;
	Поток.ОткрытьФайл(ПолноеИмяФайла);
	
	Алгоритм = Неопределено;
	АлгоритмИмя = "";
	АлгоритмУИД = "";
	АлгоритмТип = "";
	Значение = Неопределено;
	ЗначениеИмя = "";
	ЗначениеАлгоритмУИД = "";
	ЗначениеТип = Неопределено;
	АлгоритмРодительУИД = "";
	
	СтрокиПоРодителю = Новый Соответствие;
	СтрокиПоРодителю.Вставить("", Неопределено);
	
	Сериализатор = Новый СериализаторXDTO(Новый ФабрикаXDTO);
	Пока Поток.Прочитать() Цикл
		Если Поток.Имя = "Алгоритм" Тогда
			АлгоритмИмя = Строка(Поток.ПолучитьАтрибут("Имя"));
			АлгоритмУИД = Строка(Поток.ПолучитьАтрибут("УИД"));
			АлгоритмРодительУИД = Строка(Поток.ПолучитьАтрибут("Родитель"));
			
			АлгоритмТип = "";
			Если Алгоритм = Неопределено
				Или Алгоритм.Имя <> АлгоритмИмя
				Или Алгоритм.УИД <> АлгоритмУИД Тогда
				
				РодительАлгоритма = СтрокиПоРодителю[АлгоритмРодительУИД];
				Если РодительАлгоритма = Неопределено Тогда
					РодительАлгоритма = ЭтотОбъект.Алгоритмы.ПолучитьЭлементы();
				КонецЕсли;
				
				Алгоритм = РодительАлгоритма.Добавить();
				Алгоритм.Имя = АлгоритмИмя;
				Алгоритм.УИД = АлгоритмУИД;
				
				СтрокиПоРодителю.Вставить(АлгоритмУИД, Алгоритм.ПолучитьЭлементы());
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Поток.Имя = "КодЗапроса" Или Поток.Имя = "КодКлиента1С" Или Поток.Имя = "КодСервера1С" Или Поток.Имя = "КодФоновойОбработки" Тогда
			АлгоритмТип = Поток.Имя;
		КонецЕсли;
		Если Поток.Имя = "#text" И ЗначениеЗаполнено(АлгоритмТип) Тогда
			Алгоритм[АлгоритмТип] = Поток.Значение;
			АлгоритмТип = "";
		КонецЕсли;
		
		Если Поток.Имя = "Значение" Тогда
			ЗначениеИмя = Строка(Поток.ПолучитьАтрибут("Имя"));
			ЗначениеАлгоритмУИД = Строка(Поток.ПолучитьАтрибут("АлгоритмУИД"));
			ЗначениеТип = ПрочитатьТипЗначения(Поток, Сериализатор);
			
			Если Значение = Неопределено Или Значение.Имя <> ЗначениеИмя Или Значение.АлгоритмУИД <> ЗначениеАлгоритмУИД Тогда
				Значение = ЭтотОбъект.Значения.Добавить();
				Значение.Имя = ЗначениеИмя;
				Значение.АлгоритмУИД = ЗначениеАлгоритмУИД;
				Попытка
					Значение.Значение = ПрочитатьЗначение(Поток, ЗначениеТип, Сериализатор);
				Исключение
					сообщить("какая то лажа " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Поток.Закрыть();
	
	Для Каждого Алгоритм Из ЭтотОбъект.Алгоритмы.ПолучитьЭлементы() Цикл
		Если Не ЗначениеЗаполнено(Алгоритм.УИД) Тогда
			Алгоритм.УИД = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьАлгоритмыВФайл(ПолноеИмяФайла)
	Сериализатор = Новый СериализаторXDTO(Новый ФабрикаXDTO);
	
	Поток = Новый ЗаписьXML;
	Поток.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	Поток.ЗаписатьОбъявлениеXML();
	Поток.ЗаписатьНачалоЭлемента("DTCONS83");
	
	ЗаписатьАлгоритмыВФайлРекурсивно(Поток, ЭтотОбъект.Алгоритмы.ПолучитьЭлементы());
	
	Поток.ЗаписатьНачалоЭлемента("Значения");
	Для Каждого Значение Из ЭтотОбъект.Значения Цикл
		Поток.ЗаписатьНачалоЭлемента("Значение");
		Поток.ЗаписатьАтрибут("Имя", Значение.Имя);
		Поток.ЗаписатьАтрибут("АлгоритмУИД", Значение.АлгоритмУИД);
		
		ЗаписатьТипЗначения(Поток, Значение.Значение, Сериализатор);
		ЗаписатьЗначение(Поток, Значение.Значение, Сериализатор);
		Поток.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Поток.ЗаписатьКонецЭлемента();
	
	Поток.ЗаписатьКонецЭлемента();
	Поток.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьАлгоритмыВФайлРекурсивно(Поток, Алгоритмы)
	
	Перем Алгоритм;
	
	Поток.ЗаписатьНачалоЭлемента("Алгоритмы");
	Для Каждого Алгоритм Из Алгоритмы Цикл
		
		Родитель = Алгоритм.ПолучитьРодителя();
		
		Поток.ЗаписатьНачалоЭлемента("Алгоритм");
		Поток.ЗаписатьАтрибут("Имя", Алгоритм.Имя);
		Поток.ЗаписатьАтрибут("УИД", Алгоритм.УИД);
		Поток.ЗаписатьАтрибут("Родитель", ?(Родитель = Неопределено, "", Родитель.УИД));
		
		Поток.ЗаписатьНачалоЭлемента("КодЗапроса");
		Поток.ЗаписатьТекст(Алгоритм.КодЗапроса);
		Поток.ЗаписатьКонецЭлемента();
		
		Поток.ЗаписатьНачалоЭлемента("КодКлиента1С");
		Поток.ЗаписатьТекст(Алгоритм.КодКлиента1С);
		Поток.ЗаписатьКонецЭлемента();
		
		Поток.ЗаписатьНачалоЭлемента("КодСервера1С");
		Поток.ЗаписатьТекст(Алгоритм.КодСервера1С);
		Поток.ЗаписатьКонецЭлемента();
		
		Поток.ЗаписатьНачалоЭлемента("КодФоновойОбработки");
		Поток.ЗаписатьТекст(Алгоритм.КодФоновойОбработки);
		Поток.ЗаписатьКонецЭлемента();
		
		Поток.ЗаписатьКонецЭлемента();
		
		ЗаписатьАлгоритмыВФайлРекурсивно(Поток, Алгоритм.ПолучитьЭлементы());
		
	КонецЦикла;
	Поток.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаписатьТипЗначения(Поток, Значение, Сериализатор, ENG = Ложь)
	ИмяАтрибута = ?(ENG = Истина, "Type", "Тип");
	ИмяСписка = ?(ENG = Истина, "ValueList", "СписокЗначений");
	ИмяНеопределено = ?(ENG = Истина, "Undefined", "Неопределено");
	
	Поток.ЗаписатьАтрибут(ИмяАтрибута,
	?(ТипЗнч(Значение) = Тип("СписокЗначений"), "СписокЗначений",
	?(Значение = Неопределено, "Неопределено",
	Сериализатор.XMLСтрока(ТипЗнч(Значение)))));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаписатьЗначение(Поток, Значение, Сериализатор, ENG = Ложь)
	ИмяНеопределено = ?(ENG = Истина, "Undefined", "Неопределено");
	ИмяЭлементСписка = ?(ENG = Истина, "ValueListItem", "Элемент");
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из Значение Цикл
			Поток.ЗаписатьНачалоЭлемента(ИмяЭлементСписка);
			ЗаписатьТипЗначения(Поток, ЭлементСписка.Значение, Сериализатор, ENG);
			ЗаписатьЗначение(Поток, ЭлементСписка.Значение, Сериализатор, ENG);
			Поток.ЗаписатьКонецЭлемента();
		КонецЦикла;
	Иначе
		Поток.ЗаписатьТекст(?(Значение = Неопределено, ИмяНеопределено, Сериализатор.XMLСтрока(Значение)));
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрочитатьТипЗначения(Поток, Сериализатор, ENG = Ложь)
	ИмяАтрибута = ?(ENG = Истина, "Type", "Тип");
	ИмяСписка = ?(ENG = Истина, "ValueList", "СписокЗначений");
	ИмяНеопределено = ?(ENG = Истина, "Undefined", "Неопределено");
	
	ЗначениеТип = Поток.ПолучитьАтрибут(ИмяАтрибута);
	ЗначениеТип =
	?(ЗначениеТип = ИмяСписка, Тип("СписокЗначений"),
	?(ЗначениеТип = ИмяНеопределено, Тип("Неопределено"),
	Сериализатор.XMLЗначение(Тип("Тип"), ЗначениеТип)));
	
	Возврат ЗначениеТип;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрочитатьЗначение(Поток, ЗначениеТип, Сериализатор, ENG = Ложь)
	ИмяНеопределено = ?(ENG = Истина, "Undefined", "Неопределено");
	ИмяЭлементСписка = ?(ENG = Истина, "ValueListItem", "Элемент");
	
	Поток.Прочитать();
	Если ЗначениеТип = Тип("СписокЗначений") Тогда
		Значение = Новый СписокЗначений;
		Пока Поток.Имя = ИмяЭлементСписка Цикл
			ЭлементТип = ПрочитатьТипЗначения(Поток, Сериализатор, ENG);
			Элемент = ПрочитатьЗначение(Поток, ЭлементТип, Сериализатор, ENG);
			
			Значение.Добавить(Элемент);
			Поток.Прочитать();
			Поток.Прочитать();
		КонецЦикла;
	Иначе
		Значение = ?(ЗначениеТип = Тип("Неопределено") ИЛИ Поток.Значение = "", Неопределено, Сериализатор.XMLЗначение(ЗначениеТип, Поток.Значение));
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандВыгрузкиЗагрузки

&НаКлиенте
Процедура ПоказатьСохранениеДампа(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = Объект.ПолноеИмяВыгрузки;
	Диалог.Фильтр = НСтр("ru='Выгрузка в dump (*.dump)|*.dump';en='Save to dump (*.dump)|*.dump'");
	
	Оповещение = Новый ОписаниеОповещения("СохранитьДампВыгрузки", ЭтотОбъект, Истина);
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДампВыгрузки(ИмяФайла, Оповещение = Ложь) Экспорт
	Если ИмяФайла = Неопределено Или (Оповещение И ИмяФайла.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	Объект.ПолноеИмяВыгрузки = ?(Оповещение, ИмяФайла[0], ИмяФайла);
	
	ДампВыгрузки = ДампВыгрузки();
	Поток = Новый ЗаписьТекста(Объект.ПолноеИмяВыгрузки);
	Поток.Записать(ДампВыгрузки);
	Поток.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОткрытиеВыгрузки(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = Объект.ПолноеИмяВыгрузки;
	Диалог.Фильтр =
		НСтр("ru='Файл с разделителями <;> (*.csv,*.txt)|*.csv;*.txt';en='File delimited by <;> (*.csv,*.txt)|*.csv;*.txt'") + "|" +
		НСтр("ru='Файл с разделителями <TAB> (*.csv,*.txt)|*.csv;*.txt';en='File delimited by <TAB> (*.csv,*.txt)|*.csv;*.txt'") + "|" +
		НСтр("ru='Выгрузка в dump (*.dump)|*.dump';en='Save to dump (*.dump)|*.dump'");
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФайлВыгрузки", ЭтотОбъект, Диалог);
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыгрузки(ИмяФайла, Диалог) Экспорт
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ПолноеИмяВыгрузки = ИмяФайла[0];
	
	Режим =
	?(Диалог.ИндексФильтра = 2, "DUMP",
	?(Диалог.ИндексФильтра = 0, "CSV",
	?(Диалог.ИндексФильтра = 1, "TXT",
	 "")));
	
	ТекстовыйБуфер = СодержимоеФайла(Объект.ПолноеИмяВыгрузки);
	ЗагрузитьТекстовыйБуфер(ТекстовыйБуфер, Режим);
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЧтениеВыгрузокЗагрузок

&НаСервере
Функция ДампВыгрузки()
	Таблица = ДанныеФормыВЗначение(Выгрузка, Тип("ТаблицаЗначений"));
	Таблица.Колонки.Удалить("_К");
	Таблица.Колонки.Удалить("_П");
	ДампВыгрузки = ЗначениеВСтрокуВнутр(Таблица);
	Возврат ДампВыгрузки;
КонецФункции

// Режим - "DUMP", "CSV", "TXT" - ЗначениеИзСтрокиВнутр, Разделитель <;>, Разделитель <TAB>
&НаСервере
Процедура ЗагрузитьТекстовыйБуфер(ТекстовыйБуфер, Режим = Неопределено)
	Если ВРег(Режим) = "DUMP" Тогда
		Таблица = ЗначениеИзСтрокиВнутр(ТекстовыйБуфер);
	ИначеЕсли ВРег(Режим) = "CSV" Тогда
		Таблица = ТаблицаЗначений(ТекстовыйБуфер, ";");
	ИначеЕсли ВРег(Режим) = "TXT" Тогда
		Таблица = ТаблицаЗначений(ТекстовыйБуфер, Символы.Таб);
	Иначе
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыРезультата = "Выгрузка";
	ПодготовитьКолонкиТаблицы(ИмяТаблицыРезультата, Таблица.Колонки);
	Выгрузка.Загрузить(Таблица);
	ПронумероватьСтроки(Выгрузка);
КонецПроцедуры

&НаСервере
Функция ТаблицаЗначений(ТекстовыйБуфер, Разделитель)
	Таблица = Новый ТаблицаЗначений;
	
	ЧислоСтрок = СтрЧислоСтрок(ТекстовыйБуфер);
	Если ЧислоСтрок < 1 Тогда
		Возврат Таблица;
	КонецЕсли;
	
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000));
	Счетчик = 0;
	Индекс = 0;
	
	СтрокаБуфера = СтрПолучитьСтроку(ТекстовыйБуфер, 1);
	ДанныеСтроки = СтрРазделить(СтрокаБуфера, Разделитель, Истина);
	Для Каждого ПолеСтроки Из ДанныеСтроки Цикл
		Счетчик = Счетчик + 1;
		Попытка
			ИмяПоля = ПолеСтроки;
			Таблица.Колонки.Добавить(ИмяПоля, ТипСтрока);
		Исключение
			ИмяПоля = "Поле" + Формат(Счетчик, "ЧЦ=3; ЧДЦ=; ЧВН=; ЧГ=");
			Таблица.Колонки.Добавить(ИмяПоля, ТипСтрока);
		КонецПопытки
	КонецЦикла;
	ВсегоКолонок = Таблица.Колонки.Количество();
	
	ВсеСтроки = СтрРазделить(ТекстовыйБуфер, Символы.ПС);
	Для Каждого СтрокаБуфера Из ВсеСтроки Цикл
		ДанныеСтроки = СтрРазделить(СтрокаБуфера, Разделитель, Истина);
		ВсегоДанных = ДанныеСтроки.Количество();
		
		Запись = Таблица.Добавить();
		
		Индекс = 0;
		Пока Индекс < ВсегоКолонок И Индекс < ВсегоДанных Цикл
			Запись[Индекс] = ДанныеСтроки[Индекс];
			Индекс = Индекс + 1;
		КонецЦикла
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СодержимоеФайла(ПолноеИмяФайла)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("");
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла);
	
	Размер = 1024;
	Буфер = ЧтениеТекста.Прочитать(Размер);
	Пока Буфер <> Неопределено Цикл
		ЗаписьXML.ЗаписатьБезОбработки(Буфер);
		Буфер = ЧтениеТекста.Прочитать(Размер);
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

#КонецОбласти

#Область ПодготовкаТаблицыВыгрузки

&НаСервере
Процедура ВыгрузитьРезультат(ИмяТаблицыРезультата, РезультатВыгрузка)
	Перем Колонка;
	
	ЗначениеВРеквизитФормы(РезультатВыгрузка, ИмяТаблицыРезультата);
	
	Если ТипЗнч(РезультатВыгрузка) = Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Колонка Из РезультатВыгрузка.Колонки Цикл
		Если НЕ Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Продолжить;
		КонецЕсли;
		Элементы[ИмяТаблицыРезультата + Колонка.Имя].ТекстПодвала = РезультатВыгрузка.Итог(Колонка.Имя);
	КонецЦикла;
	Элементы["Выгрузка_К"].ТекстПодвала = РезультатВыгрузка.Количество();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьРезультатЗапроса(пТаблица)
	
	Если пТаблица.Колонки.Найти("_К") = Неопределено Тогда
		пТаблица.Колонки.Добавить("_К", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КонецЕсли;
	
	Если пТаблица.Колонки.Найти("_П") = Неопределено Тогда
		пТаблица.Колонки.Добавить("_П", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;
	
	Если ТипЗнч(пТаблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого колонка Из пТаблица.Колонки Цикл
		
		Если НЕ колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"))
			И НЕ колонка.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		индКолонки = пТаблица.Колонки.Индекс(колонка);
		имяКолонки = колонка.Имя;
		имяКолонкиРасшифровки = имяКолонки + "__СлужебныйРасшифровка__";
		пТаблица.Колонки.Добавить(имяКолонкиРасшифровки, Новый ОписаниеТипов("Строка"));
		массивПредставлений = Новый Массив;
		Для Каждого строкаТЗ Из пТаблица Цикл
			тзРезультат = строкаТЗ[имяКолонки];
			Если ТипЗнч(тзРезультат) = Тип("ТаблицаЗначений") Тогда
				адрес = ПоместитьВоВременноеХранилище(тзРезультат, Новый УникальныйИдентификатор());
				строкаТЗ[имяКолонкиРасшифровки] = адрес;
				массивПредставлений.Добавить("ТаблицаЗначений(" + тзРезультат.Количество() + ")");
			ИначеЕсли ТипЗнч(тзРезультат) = Тип("ХранилищеЗначения") Тогда
				значениеХЗ = тзРезультат.Получить();
				адрес = ПоместитьВоВременноеХранилище(значениеХЗ, Новый УникальныйИдентификатор());
				строкаТЗ[имяКолонкиРасшифровки] = адрес;
				массивПредставлений.Добавить("ХранилищеЗначения(" + ТипЗнч(значениеХЗ) + ")");
			Иначе
				массивПредставлений.Добавить("");
				строкаТЗ[имяКолонкиРасшифровки] = строкаТЗ[имяКолонки];
			КонецЕсли;
		КонецЦикла;
		
		пТаблица.Колонки.Удалить(колонка);
		пТаблица.Колонки.Вставить(индКолонки, имяКолонки, Новый ОписаниеТипов("Строка"), имяКолонки);
		пТаблица.ЗагрузитьКолонку(массивПредставлений, имяКолонки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПронумероватьСтроки(Выгрузка)
	Счетчик = 1;
	Для Каждого Стр Из Выгрузка Цикл
		Стр._К = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ТипВсеСсылки()
	// Определим ТипВсеСсылки для колонок с типом от значения Неопределено
	ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(Новый ОписаниеТипов("Строка"));
	ОбъектXDTO.TypeSet.Добавить(Новый РасширенноеИмяXML("http://v8.1c.ru/8.1/data/enterprise/current-config", "AnyRef"));
	ТипВсеСсылки = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
	Возврат ТипВсеСсылки;
КонецФункции

&НаСервере
Процедура ПодготовитьКолонкиТаблицы(ИмяКорневогоРеквизита, Колонки)
	ТипВсеСсылки = ТипВсеСсылки();
	// подготовим массив удаляемых реквизитов
	УдаляемыеРеквизиты = Новый Массив;
	ИмеющиесяРеквизиты = ПолучитьРеквизиты(ИмяКорневогоРеквизита);
	Для Каждого Реквизит Из ИмеющиесяРеквизиты Цикл
		Если Реквизит.Имя = "_К" Или Реквизит.Имя = "_П" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеРеквизиты.Добавить(ИмяКорневогоРеквизита + "." + Реквизит.Имя);
	КонецЦикла;
	
	// типы колонок, которые не отображаются на клиенте
	ТипТаблица = Тип("РезультатЗапроса");
	ТипХранилище = Тип("ХранилищеЗначения");
	ТипТип = Тип("Тип");
	ТипNull = Тип("Null");
	// подготовим массив добавляемых реквизитов
	НовыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из Колонки Цикл
		Если Колонка.Имя = "_К" Или Колонка.Имя = "_П" Тогда
			Продолжить;
		КонецЕсли;
		ТипРеквизита = ?(ЗначениеЗаполнено(Колонка.ТипЗначения), Колонка.ТипЗначения, ТипВсеСсылки);
		Если ТипРеквизита.СодержитТип(ТипТаблица) Или ТипРеквизита.СодержитТип(ТипХранилище) Или ТипРеквизита.СодержитТип(ТипТип)
			Тогда
			Продолжить;
		КонецЕсли;
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, ТипРеквизита, ИмяКорневогоРеквизита);
		НовыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;
	// Удалим элементы формы
	Элемент_К = Элементы[ИмяКорневогоРеквизита + "_К"];
	Элемент_П = Элементы[ИмяКорневогоРеквизита + "_П"];
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы[ИмяКорневогоРеквизита].ПодчиненныеЭлементы Цикл
		Если Элемент = Элемент_К Или Элемент = Элемент_П Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		УдалитьОформлениеЭлемента(Элемент.Имя);
		Элементы.Удалить(Элемент);
	КонецЦикла;
	// создадим реквизиты и элементы
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	Для Каждого Колонка Из Колонки Цикл
		Если Колонка.Имя = "_К" Или Колонка.Имя = "_П" Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Колонка.Имя, "__СлужебныйРасшифровка__") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		ТипРеквизита = ?(ЗначениеЗаполнено(Колонка.ТипЗначения), Колонка.ТипЗначения, ТипВсеСсылки);
		Если ТипРеквизита.СодержитТип(ТипТаблица) Или ТипРеквизита.СодержитТип(ТипХранилище) Или ТипРеквизита.СодержитТип(ТипТип)
			Тогда
			Продолжить;
		КонецЕсли;
		Элемент = Элементы.Добавить(ИмяКорневогоРеквизита + Колонка.Имя, Тип("ПолеФормы"), Элементы[ИмяКорневогоРеквизита]);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяКорневогоРеквизита + "." + Колонка.Имя;
		Элементы.Переместить(Элемент, Элементы[ИмяКорневогоРеквизита], Элемент_П);
		УстановитьОформлениеЭлемента(Элемент.Имя, Элемент.ПутьКДанным);
		Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДЗПередВыводом(пДерево)
	
	Если пДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	пМассивКолонок = Новый Массив;
	Для Каждого колонка Из пДерево.Колонки Цикл
		Если колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) ИЛИ колонка.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			пМассивКолонок.Добавить(колонка);
			индКолонки = пДерево.Колонки.Индекс(колонка);
			имяКолонки = колонка.Имя;
			имяКолонкиРасшифровки = имяКолонки + "__СлужебныйРасшифровка__";
			пДерево.Колонки.Добавить(имяКолонкиРасшифровки, Новый ОписаниеТипов("Строка"));
			имяКолонкиПредставления = имяКолонки + "__СлужебныйПредставление__";
			пДерево.Колонки.Добавить(имяКолонкиПредставления, Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеДерева = Новый Массив;
	текСтроки = пДерево.Строки;
	Пока Истина Цикл
		Если текСтроки.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		массивКРазвороту = Новый Массив;
		Для Каждого строкаДерева Из текСтроки Цикл
			КолвоПодчиненных = 0;
			Для Каждого строкаПодчиненная Из строкаДерева.Строки Цикл
				массивКРазвороту.Добавить(строкаПодчиненная);
				КолвоПодчиненных = КолвоПодчиненных + 1;
			КонецЦикла;
			ОписаниеДерева.Добавить(Новый Структура("СтрокаДерева, КолвоПодчиненных", строкаДерева, КолвоПодчиненных));
		КонецЦикла;
		текСтроки = массивКРазвороту;
	КонецЦикла;
	
	Для Каждого колонка Из пМассивКолонок Цикл
		имяКолонки = колонка.Имя;
		имяКолонкиРасшифровки = имяКолонки + "__СлужебныйРасшифровка__";
		имяКолонкиПредставления = имяКолонки + "__СлужебныйПредставление__";
		
		Для Каждого строкаОписания Из ОписаниеДерева Цикл
			Если строкаОписания.КолвоПодчиненных = 0 Тогда
				Продолжить;
			КонецЕсли;
			массивПредставлений = Новый Массив;
			Для Каждого строкаДерева Из строкаОписания.СтрокаДерева.Строки Цикл
				тзРезультат = строкаДерева[имяКолонки];
				Если ТипЗнч(тзРезультат) = Тип("ТаблицаЗначений") Тогда
					адрес = ПоместитьВоВременноеХранилище(тзРезультат, Новый УникальныйИдентификатор());
					строкаДерева[имяКолонкиРасшифровки] = адрес;
					массивПредставлений.Добавить("ТаблицаЗначений("+тзРезультат.Количество()+")");
				ИначеЕсли ТипЗнч(тзРезультат) = Тип("ХранилищеЗначения") Тогда
					значениеХЗ = тзРезультат.Получить();
					адрес = ПоместитьВоВременноеХранилище(значениеХЗ, Новый УникальныйИдентификатор());
					строкаДерева[имяКолонкиРасшифровки] = адрес;
					массивПредставлений.Добавить("ХранилищеЗначения("+ТипЗнч(значениеХЗ)+")");
				Иначе
					массивПредставлений.Добавить("");
					строкаДерева[имяКолонкиРасшифровки] = строкаДерева[имяКолонки];
				КонецЕсли;
			КонецЦикла;
			строкаОписания.СтрокаДерева.Строки.ЗагрузитьКолонку(массивПредставлений, имяКолонкиПредставления);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого колонка Из пМассивКолонок Цикл
		имяКолонки = колонка.Имя;
		пДерево.Колонки.Удалить(колонка);
		пДерево.Колонки[имяКолонки + "__СлужебныйПредставление__"].Имя = имяКолонки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВыводаДерева(пРезЗапроса, ВыполняемыйТекстЗапроса, пДерево)
	Если Найти(ВРег(ВыполняемыйТекстЗапроса), "ИТОГИ") = 0 Тогда		//точно не дерево
		Возврат Ложь;
	КонецЕсли;
	пДерево = пРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для Каждого строкаКорня Из пДерево.Строки Цикл
		Если строкаКорня.Строки.Количество() > 0 Тогда//точно дерево
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	//все-таки не дерево
КонецФункции

&НаСервере
Процедура УстановитьОформлениеЭлемента(ИмяЭлемента, ИмяРеквизита)
	Сравнения = ВидСравненияКомпоновкиДанных;
	Накопление = ВидДвиженияНакопления;
	ДтКт = ВидДвиженияБухгалтерии;
	ЦветСерый = WebЦвета.Серый;
	ЦветМинуса = WebЦвета.Красный;
	ЦветПоля = WebЦвета.Черный;
	ПустаяСсылка = "{00000000-0000-0000-0000-000000000000}";
	ПустаяДата = '00010101';
	
	ВидыОформления = Новый Массив;
	ДобавитьВидОформления(ВидыОформления, "ПУСТАЯДАТА", Сравнения.Равно, ПустаяДата, НСтр("ru='без даты';en='empty date'"), ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "ПУСТАЯСТРОКА", Сравнения.Равно, "", НСтр("ru='пустая строка';en='empty string'"), ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "NULL", Сравнения.Равно, Null, "<<NULL>>", ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "НОЛЬ", Сравнения.Равно, 0, "0.0", ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "ПРИХОД", Сравнения.Равно, Накопление.Приход, Накопление.Приход, ЦветПоля);
	ДобавитьВидОформления(ВидыОформления, "РАСХОД", Сравнения.Равно, Накопление.Расход, Накопление.Расход, ЦветМинуса);
	ДобавитьВидОформления(ВидыОформления, "ДЕБЕТ", Сравнения.Равно, ДтКт.Дебет, ДтКт.Дебет, ЦветПоля);
	ДобавитьВидОформления(ВидыОформления, "КРЕДИТ", Сравнения.Равно, ДтКт.Кредит, ДтКт.Кредит, ЦветПоля);
	ДобавитьВидОформления(ВидыОформления, "МЕНЬШЕНУЛЯ", Сравнения.Меньше, 0., Неопределено, ЦветМинуса);
	ДобавитьВидОформления(ВидыОформления, "НЕОПРЕДЕЛЕНО", Сравнения.Равно, Неопределено, НСтр("ru='<<НЕОПРЕДЕЛЕНО>>';en='<<UNDEFINED>>'"), ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "ЛОЖЬ", Сравнения.Равно, Ложь, Ложь, ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "ИСТИНА", Сравнения.Равно, Истина, Истина, ЦветПоля);
	//ДобавитьВидОформления(ВидыОформления, "НЕЗАПОЛНЕНО", Сравнения.НеЗаполнено, "", ПустаяСсылка, ЦветСерый);
	
	Для Каждого ВидОформления Из ВидыОформления Цикл
		ОписаниеОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		ОписаниеОформления.Использование = Истина;
		ОписаниеОформления.ИдентификаторПользовательскойНастройки = ИмяЭлемента + " = " + ВидОформления.Имя;
		
		Отбор = ОписаниеОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.Использование = Истина;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
		Отбор.ВидСравнения = ВидОформления.ВидСравнения;
		Отбор.ПравоеЗначение = ВидОформления.ПравоеЗначение;
		
		Поле = ОписаниеОформления.Поля.Элементы.Добавить();
		Поле.Использование = Истина;
		Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		
		Оформление = ОписаниеОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
		Оформление.Использование = Истина;
		Оформление.Значение = ВидОформления.ЦветТекста;
		Если Неопределено <> ВидОформления.Текст Тогда
			Оформление = ОписаниеОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"));
			Оформление.Использование = Истина;
			Оформление.Значение = ВидОформления.Текст;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВидОформления(ВидыОформления, ИмяОформления, ВидСравнения, ПравоеЗначение, Текст, ЦветТекста)
	Ключи = "Имя, ВидСравнения, ПравоеЗначение, Текст, ЦветТекста";
	ВидыОформления.Добавить(Новый Структура(Ключи, ИмяОформления, ВидСравнения, ПравоеЗначение, Текст, ЦветТекста));
КонецПроцедуры

&НаСервере
Процедура УдалитьОформлениеЭлемента(ИмяЭлемента)
	УдаляемыеОписания = Новый Массив;
	Для Каждого ОписаниеОформления Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		Если Найти(ОписаниеОформления.ИдентификаторПользовательскойНастройки, ИмяЭлемента) > 0 Тогда
			УдаляемыеОписания.Добавить(ОписаниеОформления);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемоеОписание Из УдаляемыеОписания Цикл
		ЭтаФорма.УсловноеОформление.Элементы.Удалить(УдаляемоеОписание);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеМетодыФормы

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	СтраницаКодаПредставление =
		?(СтраницаКода = "КодЗапроса", НСтр("ru='(Код запроса)';en='(Query code)'"),
		?(СтраницаКода = "КодКлиента1С", НСтр("ru='(Код 1С на клиенте)';en='(Client 1C code)'"),
		?(СтраницаКода = "КодСервера1С", НСтр("ru='(Код 1С на сервере)';en='(Server 1C code)'"),
		?(СтраницаКода = "КодФоновойОбработки", НСтр("ru='(Код в фоне)';en='(Async code)'"),
		 ""))));
	АлгоритмыПредставление = ?(Элементы.Алгоритмы.ТекущиеДанные = Неопределено, "Алгоритмы", Элементы.Алгоритмы.ТекущиеДанные.Имя);
	
	Заголовок = СтрШаблон("Cons: %1 %2 [%3]",
		АлгоритмыПредставление,
		СтраницаКодаПредставление,
		Объект.ПолноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗначений()
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	ТекущийАлгоритм = ?(Алгоритм = Неопределено, "", Алгоритм.УИД);
	Элементы.Значения.ОтборСтрок = Новый ФиксированнаяСтруктура("АлгоритмУИД", ТекущийАлгоритм);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПродолжения(КодДиалога, КомандаОбработки) Экспорт
	Если КодДиалога <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если КомандаОбработки = "НОВЫЙ" Тогда
		НовыйФайлАлгоритмов();
	ИначеЕсли КомандаОбработки = "ОТКРЫТЬ" Тогда
		ПоказатьОткрытиеАлгоритмов();
	ИначеЕсли КомандаОбработки = "ЗАКРЫТЬ" Тогда
		ЭтотОбъект.Модифицированность = Ложь;
		ЗакрытьКонсоль();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодПродолжить(пНазваниеЗапроса, ДополнительныеПараметры) Экспорт
	
	Если пНазваниеЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = Алгоритм.КодЗапроса;
	
	КодЗапроса = пНазваниеЗапроса + " = Новый Запрос;" + Символы.ПС;
	НовыйТекст = "";
	Для Ном = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
		Текст = СтрЗаменить(СтрПолучитьСтроку(ТекстЗапроса, Ном), "|","");
		Текст = СтрЗаменить(Текст, Символ(34), Символ(34) + Символ(34));
		НовыйТекст = НовыйТекст + Символы.Таб + "|" + Текст + Символы.ПС;
	КонецЦикла;
	
	КодЗапроса = КодЗапроса + пНазваниеЗапроса + ".Текст = " + Символы.ПС +Символы.Таб+ """"+ СокрЛП(Сред(НовыйТекст,3)) + """"+Символы.ПС+";" + Символы.ПС;
	//ТекстЗапроса = СтрЗаменить(вПолучитьТекстЗапроса(Истина), "|", "");
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ПоказатьПредупреждение(, "Отсутствует текст запроса.");
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрЗапроса Из Значения.НайтиСтроки(Новый Структура("АлгоритмУИД", Алгоритм.УИД)) Цикл
		Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("СписокЗначений") Тогда
			Если ПараметрЗапроса.Значение.Количество() > 0 Тогда
				КодЗапроса = КодЗапроса + ПараметрЗапроса.Имя + " = Новый Массив;" + Символы.ПС;
				Для Каждого элСписка Из ПараметрЗапроса.Значение Цикл
					текстЭлемента = ПолучитьТекстПараметра(элСписка.Значение);
					КодЗапроса = КодЗапроса + ПараметрЗапроса.Имя + ".Добавить("+текстЭлемента+");" + Символы.ПС;
				КонецЦикла;
				КодЗапроса = КодЗапроса + пНазваниеЗапроса + ".УстановитьПараметр("""+ПараметрЗапроса.Имя+""","+ПараметрЗапроса.ИмяПараметра+");" + Символы.ПС;
			КонецЕсли;
		Иначе
			текстПараметр = ПолучитьТекстПараметра(ПараметрЗапроса.Значение);
			КодЗапроса = КодЗапроса + пНазваниеЗапроса + ".УстановитьПараметр("""+ПараметрЗапроса.Имя+""","+текстПараметр+");" + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	КодЗапроса = КодЗапроса + Символы.ПС + "Выборка = " + пНазваниеЗапроса + ".Выполнить().Выбрать();" + Символы.ПС;
	КодЗапроса = КодЗапроса + "Пока Выборка.Следующий() Цикл" + Символы.ПС;
	КодЗапроса = КодЗапроса + "//" + Символы.ПС;
	КодЗапроса = КодЗапроса + "КонецЦикла;" + Символы.ПС;
	ФормаКода = ПолучитьФорму("Обработка.КонсольЗапросов.Форма.ФормаКодаЗапросаУпр",, ЭтаФорма);
	ФормаКода.КодЗапроса = КодЗапроса;
	ФормаКода.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстПараметра(пЗначениеПараметра)
	
	типПараметра = ТипЗнч(пЗначениеПараметра);
	
	текстПараметр = "";
	Если типПараметра = Тип("Строка") Тогда
		текстПараметр = """"+пЗначениеПараметра+"""";
	ИначеЕсли типПараметра = Тип("Число") Тогда
		текстПараметр = Формат(пЗначениеПараметра, "ЧГ=0");
	ИначеЕсли типПараметра = Тип("Булево") Тогда
		текстПараметр = Формат(пЗначениеПараметра, "ДФ=yyyyMMdd; БЛ=Ложь; БИ=Истина");
	ИначеЕсли типПараметра = Тип("Дата") Тогда
		текстПараметр = "Дата("""+Формат(пЗначениеПараметра,"ДФ=yyyyMMdd")+""")";
	ИначеЕсли пЗначениеПараметра = Неопределено Тогда
		текстПараметр = "Неопределено";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(текстПараметр) Тогда Возврат текстПараметр; КонецЕсли;	//для примитивных типов
	
	тзМенеджеры = Новый ТаблицаЗначений;
	тзМенеджеры.Колонки.Добавить("Менеджер");
	тзМенеджеры.Колонки.Добавить("ИмяМенеджера");
	тзМенеджеры.Колонки.Добавить("ЕстьНомер");
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Справочники;
	новСтрока.ИмяМенеджера = "Справочники";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Документы;
	новСтрока.ИмяМенеджера = "Документы";
	новСтрока.ЕстьНомер = Истина;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = БизнесПроцессы;
	новСтрока.ИмяМенеджера = "БизнесПроцессы";
	новСтрока.ЕстьНомер = Истина;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Задачи;
	новСтрока.ИмяМенеджера = "Задачи";
	новСтрока.ЕстьНомер = Истина;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыВидовРасчета;
	новСтрока.ИмяМенеджера = "ПланыВидовРасчета";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыВидовХарактеристик;
	новСтрока.ИмяМенеджера = "ПланыВидовХарактеристик";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыСчетов;
	новСтрока.ИмяМенеджера = "ПланыСчетов";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = ПланыОбмена;
	новСтрока.ИмяМенеджера = "ПланыОбмена";
	новСтрока.ЕстьНомер = Ложь;
	новСтрока = тзМенеджеры.Добавить();
	новСтрока.Менеджер = Перечисления;
	новСтрока.ИмяМенеджера = "Перечисления";
	новСтрока.ЕстьНомер = "Перечисления";
	
	метаПараметра = пЗначениеПараметра.Метаданные();
	этоПредопределенный = Ложь;
	Попытка
		этоПредопределенный = пЗначениеПараметра.Предопределенный;
	Исключение
	КонецПопытки;
	
	Для Каждого строкаМенеджера Из тзМенеджеры Цикл
		Если строкаМенеджера.Менеджер.ТипВсеСсылки().СодержитТип(типПараметра) Тогда
			Если этоПредопределенный Тогда
				имяПредопределенного = строкаМенеджера.Менеджер[метаПараметра.Имя].ПолучитьИмяПредопределенного(пЗначениеПараметра);
				текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+"." + имяПредопределенного;
			ИначеЕсли Не ЗначениеЗаполнено(пЗначениеПараметра) Тогда
				текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+".ПустаяСсылка()";
			ИначеЕсли строкаМенеджера.ЕстьНомер = "Перечисления" Тогда
				индексЗначенияПеречисления = Перечисления[метаПараметра.Имя].Индекс(пЗначениеПараметра);
				имяЗначения = Метаданные.Перечисления[метаПараметра.Имя].ЗначенияПеречисления[индексЗначенияПеречисления].Имя;
				текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+"." + имяЗначения;
			ИначеЕсли строкаМенеджера.ЕстьНомер = Истина Тогда
				периодичностьНомера = Ложь;
				Если строкаМенеджера.ИмяМенеджера = "Документы" ИЛИ строкаМенеджера.ИмяМенеджера = "БизнесПроцессы" Тогда
					периодичностьНомера = ?(метаПараметра.ПериодичностьНомера = "Непериодический", Ложь, Истина);
				КонецЕсли;
				Если периодичностьНомера Тогда
					периодПараметр = пЗначениеПараметра.Дата;
					Если Строка(метаПараметра.ПериодичностьНомера) = "Год" Тогда
						периодПараметр = НачалоГода(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "Квартал" Тогда
						периодПараметр = НачалоКвартала(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "Месяц" Тогда
						периодПараметр = НачалоМесяца(периодПараметр);
					ИначеЕсли Строка(метаПараметра.ПериодичностьНомера) = "День" Тогда
						периодПараметр = НачалоДня(периодПараметр);
					КонецЕсли;
					Если Строка(метаПараметра.ТипНомера) = "Строка" Тогда
						текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+".НайтиПоНомеру(""" + СокрЛП(пЗначениеПараметра.Номер)
						 + """,Дата("""+Формат(периодПараметр,"ДФ=yyyyMMdd")+"""))";
					Иначе
						текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+".НайтиПоНомеру("+Формат(пЗначениеПараметра.Номер,"ЧГ=0")
						 + ",Дата("""+Формат(периодПараметр,"ДФ=yyyyMMdd")+"""))";
					КонецЕсли;
				Иначе
					Если Строка(метаПараметра.ТипНомера) = "Строка" Тогда
						текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+".НайтиПоНомеру("""+СокрЛП(пЗначениеПараметра.Номер)+""")";
					Иначе
						текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+".НайтиПоНомеру("+Формат(пЗначениеПараметра.Номер,"ЧГ=0")+")";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли метаПараметра.ДлинаКода > 0 Тогда
				Если Строка(метаПараметра.ТипКода) = "Строка" Тогда
					текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+".НайтиПоКоду("""+СокрЛП(пЗначениеПараметра.Код)+""")";
				Иначе
					текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+".НайтиПоКоду("+Формат(пЗначениеПараметра.Код,"ЧГ=0")+")";
				КонецЕсли;
			Иначе
				текстПараметр = строкаМенеджера.ИмяМенеджера + "."+метаПараметра.Имя+".НайтиПоНаименованию("""+СокрЛП(пЗначениеПараметра.Наименование)+""")";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат текстПараметр;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ConsoleOnReady(Элемент)
	
	Если ИсходникиЗагружены Тогда
		
		ДокументЗагружен = Истина;
		
		#Если ВебКлиент Тогда
			Если ВебДокументДоступен() Тогда
				ИнициализацияРедактора(Элемент.Родитель.Имя);
				АктивироватьДополнительныеФункции();
			Иначе
				ПоказатьПредупреждение(, "К сожалению, в веб - клиенте недоступны практически все функции.
				|Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
			КонецЕсли;
		#Иначе
			ИнициализацияРедактора(Элемент.Родитель.Имя);
			АктивироватьДополнительныеФункции();
		#КонецЕсли
		
		ОбновитьТекст();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие)
	
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = Событие.event;
	
	Если ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
		ОткрытьКонструкторЗапроса(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
		//ВызватьКонструкторФорматнойСтроки(Событие.params);
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "EVENT_GET_METADATA" Тогда
		ОбработкаСобытияПолученияМетаданных(Событие.params);
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
	
		ТекстСКодом = ПолучитьТекст(Ложь);
		
		Элементы.Алгоритмы.ТекущиеДанные[СтраницаКода] = ТекстСКодом;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
		
		Если 0 < СтрНайти(Событие.params.href, "e1cib") Тогда
			ПерейтиПоНавигационнойСсылке(Событие.params.href);
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если ИмяСобытия = "EVENT_GET_VARIABLE_DATA" Тогда
		ОбработкаСобытияПолученияПеременной(Событие.params);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Функция ПолучитьКодПросмотраПеременных()
	
	Код = ""; 
	
	Если 0 < ПоказыватьЗначенияПеременныхПослеВыполнения Тогда
	
		Переменные = View().getVarsNames();
		
		Если 0 < Переменные.length Тогда
			
			ПС = Символы.ПС;
			
			Для Индекс = 0 По Переменные.length - 1 Цикл
				Имя = Переменные["" + Индекс + ""];
				Код = Код + ПС + "Попытка SPd201bf6.Вставить(""" + Имя + """,Вычислить(""" + Имя + """)); Исключение КонецПопытки;" + ПС;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Код;
КонецФункции

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект);
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект);
	НачатьУдалениеФайлов(Оповещение, КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	#Если ВебКлиент Тогда
		HTML = "https://salexdv.github.io/bsl_console/src/index.html";
		ИсходникиЗагружены = Истина;
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция СкопироватьОбработкуНаСервер(АдресОбработки)
	
	ФайлОбработки = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресОбработки);
	ДвоичныеДанные.Записать(ФайлОбработки);
	
	Возврат ФайлОбработки;
	
КонецФункции

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		
		УстановитьПометкуТемы("СветлаяТема");
		УправлениеВозможностьюРедактирования();
		УправлениеЯзыкомПодсказок();
		ИзвлечьИсходники();
		
	Иначе
		
		#Если ВебКлиент Тогда
			Если ДопПараметры = Неопределено Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтотОбъект);
				НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
			Иначе
				ПоказатьПредупреждение(, "К сожалению работа в веб-клиенте невозможна!");
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, Истина);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьДополнительныеФункции()
	
	//Элементы.КонструкторЗапроса.Доступность = Истина;
	//Элементы.ЗагрузитьИзФайла.Доступность = Истина;
	//Элементы.СохранитьВФайл.Доступность = Истина;
	//Элементы.СохранитьКак.Доступность = Истина;
	//Элементы.ЗаменитьВхождения.Доступность = Истина;
	//Элементы.ТолькоПросмотр.Доступность = Истина;
	//Элементы.БыстрыеПодсказки.Доступность = Истина;
	//Элементы.ПодсвечиватьЗапросы.Доступность = Истина;
	//Элементы.КартаКода.Доступность = Истина;
	//Элементы.СтрокаСостояния.Доступность = Истина;
	//Элементы.Примеры.Доступность = Истина;
	//Элементы.КонструкторЗапроса.Доступность = Истина;
	//Элементы.Тема.Доступность = Истина;
	//Элементы.ВыполнитьНаКлиенте.Доступность = Истина;
	//Элементы.ВыполнитьНаСервере.Доступность = Истина;
	//Элементы.ЗагрузитьОбщиеМодули.Доступность = Истина;
	//Элементы.СравнитьСОригиналом.Доступность = Истина;
	//
	//УправлениеБыстрымиПодсказками();
	//УправлениеВидимостьюКартыКода();
	//УправлениеВидимостьюСтрокиСостояния();
	
	//ПриПереключенииРежимаЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданныеКод() Экспорт
	
	CodeView().clearMetadata();
	ОбновитьСписокОбщихМодулей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданные() Экспорт
	
	QueryView().clearMetadata();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора(ЭлементИмя)
	
	Инфо = Новый СистемнаяИнформация();
	ВидимостьКартыКода = Ложь;
	
	Если ЭлементИмя = "ПолеЗапрос" Тогда
		// Страница запроса
		QueryView().init(Инфо.ВерсияПриложения);
		QueryView().setOption("autoResizeEditorLayout", Истина);
		QueryView().setOption("renderQueryDelimiters", Истина);
		QueryView().setOption("generateModificationEvent", Истина);
		QueryView().hideScrollX();
		QueryView().hideScrollY();
		QueryView().setLanguageMode("bsl_query");
		
		QueryView().minimap(ВидимостьКартыКода);
	
		ПодключитьОбработчикОжидания("ОбнулитьМетаданные", 1, Истина);
	КонецЕсли;
	
	Если ЭлементИмя = "ПолеКод" Тогда
		// Страница кода
		CodeView().init(Инфо.ВерсияПриложения);
		CodeView().setOption("autoResizeEditorLayout", Истина);
		CodeView().setOption("renderQueryDelimiters", Ложь);
		CodeView().setOption("generateModificationEvent", Истина);
		CodeView().hideScrollX();
		CodeView().hideScrollY();
		CodeView().setLanguageMode("bsl");
		
		CodeView().minimap(ВидимостьКартыКода);
	
		ПодключитьОбработчикОжидания("ОбнулитьМетаданныеКод", 1, Истина);
	КонецЕсли;
	УправлениеВидимостьюКартыКода()
	
КонецПроцедуры

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

&НаСервереБезКонтекста
Функция ОписатьОбщиеМодули(Коллекция, ФильтрГлобальный = Ложь)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоллекциюОбщихМодулей()
	
	КоллекцияОбщихМодулей = Новый Структура();
	КоллекцияОбщихМодулей.Вставить("Общие"     , ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Ложь));
	КоллекцияОбщихМодулей.Вставить("Глобальные", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Истина));
	
	Возврат КоллекцияОбщихМодулей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");	
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "catalogs");
	СоответствиеИмен.Вставить("документы"                   , "documents");
	СоответствиеИмен.Вставить("documents"                   , "documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "infoRegs");
	СоответствиеИмен.Вставить("informationregisters"        , "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления"          , "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters"       , "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters"         , "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета"             , "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters"        , "calcRegs");
	СоответствиеИмен.Вставить("обработки"                   , "dataProc");
	СоответствиеИмен.Вставить("dataprocessors"              , "dataProc");
	СоответствиеИмен.Вставить("отчеты"                      , "reports");
	СоответствиеИмен.Вставить("reports"                     , "reports");
	СоответствиеИмен.Вставить("перечисления"                , "enums");
	СоответствиеИмен.Вставить("enums"                       , "enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "businessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "tasks");
	СоответствиеИмен.Вставить("tasks"                       , "tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "constants");
	СоответствиеИмен.Вставить("constants"                   , "constants");
	СоответствиеИмен.Вставить("внешниеисточникиданных"      , "externalDataSources");
	СоответствиеИмен.Вставить("externaldatasources"         , "externalDataSources");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "Catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "Catalogs");
	СоответствиеИмен.Вставить("документы"                   , "Documents");
	СоответствиеИмен.Вставить("documents"                   , "Documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "InformationRegisters");
	СоответствиеИмен.Вставить("informationregisters"        , "InformationRegisters");
	СоответствиеИмен.Вставить("регистрынакопления"          , "AccumulationRegisters");
	СоответствиеИмен.Вставить("accumulationregisters"       , "AccumulationRegisters");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "AccountingRegisters");
	СоответствиеИмен.Вставить("accountingregisters"         , "AccountingRegisters");
	СоответствиеИмен.Вставить("регистрырасчета"             , "CalculationRegisters");
	СоответствиеИмен.Вставить("calculationregisters"        , "CalculationRegisters");
	СоответствиеИмен.Вставить("обработки"                   , "DataProcessors");
	СоответствиеИмен.Вставить("dataprocessors"              , "DataProcessors");
	СоответствиеИмен.Вставить("отчеты"                      , "Reports");
	СоответствиеИмен.Вставить("reports"                     , "Reports");
	СоответствиеИмен.Вставить("перечисления"                , "Enums");
	СоответствиеИмен.Вставить("enums"                       , "Enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "ChartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "ChartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "BusinessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "BusinessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "Tasks");
	СоответствиеИмен.Вставить("tasks"                       , "Tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "ExchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "ExchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "Constants");
	СоответствиеИмен.Вставить("constants"                   , "Constants");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)
	
	Связь = "";
	
	Типы = Реквизит.Тип.Типы();
	
	Индекс = 0;
	
	Пока Индекс < Типы.Количество() И НЕ ЗначениеЗаполнено(Связь) Цикл
		
		Тип = Типы[Индекс];
		
		СвязьТипа = Связи[Тип];
		
		Если СвязьТипа = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описыватьются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Связи[Тип] = Связь;
			
		Иначе
			
			Связь = СвязьТипа;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Связь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)
	
	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");
	
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		Коллекция = Метаданные[ТипОбъектов];
		
		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СписокОбъектов);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
		АдресОбновления = ИмяКоллекции + ".items";
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)
	
	ТипРегистра = "";
	
	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда
		
		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда
		
		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли; 
		
	Иначе
		
		ТипРегистра = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)
	
	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда
				
		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаПланаСчетов.Код КАК Код,
			|	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
			|ИЗ
			|	&Таблица КАК ТаблицаПланаСчетов
			|ГДЕ
			|	ТаблицаПланаСчетов.Предопределенный");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл 
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;
			
		Иначе
			
			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();
			
			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов,
	ОписаниеРесурсов, ДополнительныеСвойства, Связи)
	
	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;
		
		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя,
	ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи)
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда
				
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
			
			ОписаниеТабличнойЧасти = Новый Структура();
			
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;
			
			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;
			
			СтруктураТабличнойЧасти = Новый Структура();
			СтруктураТабличнойЧасти.Вставить("properties", ОписаниеТабличнойЧасти);
			
			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, СтруктураТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда
					
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных)
	
	СтруктураИсточника = Новый Структура();
	
	ОписаниеТаблиц = Новый Структура();
	
	Для Каждого Таблица Из ОбъектМетаданных.Таблицы Цикл
		
		ОбъектныеДанные = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные;
		ТипТаблицы = ?(Таблица.ТипДанныхТаблицы = ОбъектныеДанные, "ObjectData", "NonobjectData");
		
		СтруктураТаблицы = Новый Структура();
		СтруктураТаблицы.Вставить("tableDataType", ТипТаблицы);
		
		ПоляТаблицы = Новый Структура();
		Для Каждого Поле Из Таблица.Поля Цикл
			ПоляТаблицы.Вставить(Поле.Имя, Новый Структура("name", Поле.Синоним));
		КонецЦикла;
		
		СтруктураТаблицы.Вставить("properties", ПоляТаблицы);
		
		ОписаниеТаблиц.Вставить(Таблица.Имя, СтруктураТаблицы);
		
	КонецЦикла;
	
	СтруктураИсточника.Вставить("tables", Новый Структура("items", ОписаниеТаблиц));
	
	Возврат СтруктураИсточника;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных)
	
	СтруктураИсточника = ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных);
	Для Каждого Обход Из СтруктураИсточника Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя)
	
	ОписаниеРеквизитов = Новый Структура();
	ОписаниеРесурсов = Новый Структура();
	ОписаниеПредопределенных = Новый Структура();
	ОписаниеТабличныхЧастей = Новый Структура();
	ДополнительныеСвойства = Новый Структура();
	
	Связи = Новый Соответствие();
	
	Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
		ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
	Иначе
		ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
		ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя,
			ОписаниеРеквизитов, ОписаниеРесурсов, ДополнительныеСвойства, Связи);
		ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
	
	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
	Если 0 < ОписаниеРесурсов.Количество() Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;
	
	Если 0 < ОписаниеПредопределенных.Количество() Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
	КонецЕсли;
	
	Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	Части = СтрРазделить(ТипОбъекта, ".");
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		СтруктураОбъекта = Новый Структура();
		
		Если 0 < СтрНайти(ИмяМетаданных(ПолноеИмя), "ВнешнийИсточникДанных") Тогда
			ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных);
		Иначе
			ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя);
		КонецЕсли;
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		АдресОбновления = ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);
		
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие)
	
	ПараметрыЗапроса = НРег(Событие.metadata);
	ВызыватьПодсказку = (Событие.trigger = "suggestion");
	ДанныеОбновлены = Ложь;
	
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		
		Если ЧастиЗапроса[0] = "module" Тогда
			
			Если ЧастиЗапроса.Количество() = 2 Тогда
				ДанныеОбновлены = ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса);
			Иначе
				ДанныеОбновлены = ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса);
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса);
		
	КонецЕсли;
	
	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		View().triggerSuggestions();
	КонецЕсли;
	
	Если Событие.trigger = "snippet"  Тогда
		View().updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияПолученияПеременной(Событие)
	
	ИмяПеременной = Событие.variableName;
	ИдентификаторПеременной = Событие.variableId;
	
	ПутьКДанным = Событие.variablePath;
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "undefined", "");
	
	Описание = ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных);
	
	Если ЗначениеЗаполнено(Описание) Тогда
		View().updateVariableDescription(ИдентификаторПеременной, Описание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View()
	
	Если СтраницаКода = "КодЗапроса" Тогда
		Возврат QueryView();
	Иначе
		Возврат CodeView();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция QueryView()
	
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Функция CodeView()
	
	Возврат Элементы.ПолеHTMLКод.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекст(ДляВыполнения = Ложь)
	
	ДляВыполнения = ДляВыполнения И НЕ СтраницаКода = "КодЗапроса";
	Код = View().getText();
	
	Переменные = ?(ДляВыполнения, ПолучитьКодПросмотраПеременных(), "");
	
	Код = Код + Переменные;
	
	Возврат Код;
	
КонецФункции

&НаКлиенте
Функция СтарПолучитьТекст()
	
	Возврат View().getText();
	
КонецФункции

&НаКлиенте
Функция ОчиститьТекст()
	
	Возврат View().eraseText();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТекст()
	
	Текст = Элементы.Алгоритмы.ТекущиеДанные[СтраницаКода];
	View().setContent(Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

&НаСервере
Функция СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей)
	
	Файл = Новый ЗаписьJSON();
	Файл.УстановитьСтроку();
	Попытка
	   ЗаписатьJSON(Файл, КоллекцияОбщихМодулей.Общие);
	Исключение
	   ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	ЗначениеКоллекции = Файл.Закрыть();
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеКоллекции, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей)
	
	// Соответствие между именем общего неглобального модуля в нижнем регистре
	// и именем модуля, как оно задано в конфигураторе для правильной загрузки
	// текстов общих модулей
	ОбщиеМодули = Новый Соответствие();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Общие Цикл
		ОбщиеМодули.Вставить(НРег(Обход.Ключ), Обход.Ключ);
	КонецЦикла;
	
	ИменаОбщихМодулей = Новый ФиксированноеСоответствие(ОбщиеМодули);
	
	// Именя глобальных модулей для загрузки текстов
	Модули = Новый Массив();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Глобальные Цикл
		Модули.Добавить(Обход.Ключ);
	КонецЦикла;
	
	ГлобальныйМодули = Новый ФиксированныйМассив(Модули);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла)
	
	СмещениеИмениВПути = 3;
	
	Путь = СтрРазделить(ПолноеИмяФайла, РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();
	
	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);
	
КонецФункции

&НаКлиенте
Функция НормализоватьПуть(Путь)
	
	Путь = СокрЛП(Путь);
	
	Если Прав(Путь, 1) <> РазделительПути Тогда
		Путь = Путь + РазделительПути;
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКаталогИсходногоКода()
	
	КаталогИсходногоКода = Объект.КаталогИсходногоКодаКонфигурации;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		КаталогИсходногоКода = НормализоватьПуть(КаталогИсходногоКода);
	КонецЕсли;
	
	Возврат КаталогИсходногоКода;
	
КонецФункции

&НаКлиенте
Процедура ВопросЗагрузкиОбщихМодулейЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние("Загрузка общих модулей...");
		Файлы = НайтиФайлы(ДопПараметры.КаталогМодулей, "Ext" + РазделительПути + "*.bsl", Истина);
		
		Для Каждого Файл Из Файлы Цикл
			ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя);
			View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
		КонецЦикла;
		
		Состояние("Общие модули загружены");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Глобальный)
	
	ЗагруженоФункций = 0;
	
	ИмяВКонфигураторе = ИменаОбщихМодулей.Получить(НРег(ИмяМодуля));
	
	Если ИмяВКонфигураторе = Неопределено Тогда
		ИмяВКонфигураторе = ИмяМодуля;
	КонецЕсли;
	
	ФайлМодуля = СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", РазделительПути, ИмяВКонфигураторе);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		ОбщийМодуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ЗагруженоФункций = View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки)
	
	ЗагруженоФункций = 0;
	ТипМодуля = СтруктураВыгрузки.ТипМодуля;
	
	ИмяТипа = ?(ТипМодуля = "manager", "ManagerModule", "ObjectModule");
	
	ФайлМодуля = СтрШаблон("%1%2Ext%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, РазделительПути, ИмяТипа);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		Модуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		АдресЗагрузки = СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);
		ЗагруженоФункций = View().parseMetadataModule(Модуль.Текст, АдресЗагрузки);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьГлобальныеМодули()
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	ЕстьГлобальныеМодули = (ГлобальныйМодули <> Неопределено И 0 < ГлобальныйМодули.Количество());
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЕстьГлобальныеМодули Тогда
		
		КаталогМодулей = КаталогИсходногоКода + "CommonModules";
		
		КаталогНаДиске = Новый Файл(КаталогМодулей);
		
		Если КаталогНаДиске.Существует() Тогда
			
			Индекс = 0;
			
			Пока Индекс < ГлобальныйМодули.Количество() Цикл
				ИмяМодуля = ГлобальныйМодули.Получить(Индекс);
				ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Истина);
				Индекс = Индекс + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 2;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		ИмяМодуля = ЧастиЗапроса[1];
		
		ЗагруженоФункций = ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Ложь);
		
		Если 0 < ЗагруженоФункций Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути)
	
	СтруктураВыгрузки.Вставить("ИмяКаталога", Неопределено);
	ЧастейМетаданных = 2;
	
	Попытка
		ПолноеИмя = Метаданные[СтруктураВыгрузки.ТипМетаданных][СтруктураВыгрузки.ОбъектМетаданных].ПолноеИмя();
	Исключение
		ПолноеИмя = "";
	КонецПопытки;
	
	Имена = СтрРазделить(ПолноеИмя, ".", Ложь);
	
	Если Имена.Количество() = ЧастейМетаданных Тогда
		
		КаталогТипа = ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		
		Если ЗначениеЗаполнено(КаталогТипа) Тогда
			ИндексОбъекта = 1;
			СтруктураВыгрузки.Вставить("ИмяОбъектаМетаданных", Имена[ИндексОбъекта]);
			СтруктураВыгрузки.ИмяКаталога = СтрШаблон("%1%2%3", КаталогТипа, РазделительПути, Имена[ИндексОбъекта]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 4;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		СтруктураВыгрузки = Новый Структура();
		СтруктураВыгрузки.Вставить("ТипМодуля"        , ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных"    , ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных" , ЧастиЗапроса[3]);
		
		ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути);
		
		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда
			
			ЗагруженоФункций = ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки);
			
			Если 0 < ЗагруженоФункций Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокОбщихМодулей()
	
	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(АдресОбщихМодулей);
	
	Если КоллекцияМетаданных <> Неопределено Тогда
		Результат = CodeView().updateMetadata(КоллекцияМетаданных, "commonModules.items");
		ЗагрузитьГлобальныеМодули();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция СтруктураПодсказки(Имя, Текст, Тип, Описание, Документация)
	
	Подсказка = Новый Структура();
	Подсказка.Вставить("name", Имя);
	Подсказка.Вставить("text", Текст);
	Подсказка.Вставить("kind", Тип);
	Подсказка.Вставить("detail", Описание);
	Подсказка.Вставить("documentation", Документация);
	
	Возврат Подсказка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = 0)
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, ЗначениеПоУмолчанию);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВозможностьюРедактирования()
	
	//Элементы.ТолькоПросмотр.Пометка = НЕ ТолькоПросмотр;
	
	ДоступностьКнопок = НЕ ТолькоПросмотр И ДокументЗагружен;
	//Элементы.КонструкторЗапроса.Доступность = ДоступностьКнопок;
	//Элементы.ЗаменитьВхождения.Доступность = ДоступностьКнопок;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЯзыкомПодсказок()
	
	//Если АнглийскийЯзык Тогда
	//	Элементы.ЯзыкПодсказок.Заголовок = "Переключить подсказки на русский язык";
	//Иначе
	//	Элементы.ЯзыкПодсказок.Заголовок = "Переключить подсказки на английский язык";
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРазделительПути()
	
	РазделительПути = ПолучитьРазделительПути();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуТемы(Тема)
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = Тема);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы()
	
	ИмяТемы = Неопределено;
	
	Имена = Новый Соответствие();
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			ИмяТемы = Имена[Элемент.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТемы;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема)
	
	Элементы.ПолеHTML.Документ.monaco.editor.setTheme(Тема);
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета, УдалятьПереносыСтрок)
	
	Макет = ПолучитьМакет(ИмяМакета);
	Текст = Макет.ПолучитьТекст();
	
	Если УдалятьПереносыСтрок Тогда
		Текст = СтрЗаменить(Текст, Символы.ПС, " ");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Функция ВебДокументДоступен()
	
	Док = Элементы.ПолеHTML.Документ;
	Если СтраницаКода <> "КодЗапроса" Тогда
		Док = Элементы.ПолеHTMLКод.Документ;
	КонецЕсли;
	
	Если Док <> Неопределено И Док.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст(Ложь);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПользовательскиеФункции()
	
	JSON = ПолучитьТекстМакета("ПользовательскиеФункции", Истина);
	Результат = View().updateCustomFunctions(JSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские функции успешно загружены!");
	Иначе
		Ошибка = "Не удалось загрузить пользовательские функции: " + Символы.ПС + Результат.errorDescription;
		ВывестиОшибку(Ошибка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ИндексныйФайл = "";
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль()
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект);
		НачатьУдалениеФайлов(Оповещение, ИндексныйФайл);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураРеквизита(Имя, Ссылка = Неопределено)

	Реквизит = Новый Структура();
	Реквизит.Вставить("name", Имя);
	
	Если Ссылка <> Неопределено Тогда
		Реквизит.Вставить("ref", Ссылка);
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользовательскиеОбъекты()
	
	Объекты = Неопределено;
	
	Если Метаданные.Справочники.Количество() <> 0 И Метаданные.Документы.Количество() <> 0 Тогда
		
		Объекты = Новый Структура();
		
		// Первый объект назовём "_СтруктураВыгрузки", у него будет 3 реквизита.
		// Реквизит "Номенклатура" будет ссылаться на соответствующий справочник,
		// если он есть, или на первый попавшийся справочник
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Справочник = Метаданные.Справочники.Найти("Номенклатура");
		Если Справочник = Неопределено Тогда
			Справочник = Метаданные.Справочники.Получить(0);
		КонецЕсли;
		
		// Ссылка на объект указывается как catalogs.ИмяСправочника или documents.ИмяДокумента
		// catalogs и documents - соответственно имена объектов, хранящих описание метаданных в файле bslMetadata.js
		// В модуле объекта есть функция ПолучитьСвязьСОбъектомМетаданных(Реквизит), которая принимает реквизит
		// Её достаточно просто модифицировать, чтобы она принимала, например, тип и сразу отдавала связь в нужном виде
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = СтруктураРеквизита("Цена товара");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Реквизит = СтруктураРеквизита("Остаток товара на складе");
		ПользовательскийОбъект.properties.Вставить("Остаток", Реквизит);
		
		Объекты.Вставить("_СтруктураВыгрузки", ПользовательскийОбъект);
		
		// Второй объект будет называться "_Партия", у него будет 3 реквизита,
		// два из которых "ПриходнаяНакладная" и "Номенклатура" будут ссылаться
		// на документ и справочник соотвественно
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровУслуг");
		Если Документ = Неопределено Тогда
			Документ = Метаданные.Документы.Найти("ПоступлениеТоваров");
			Если Документ = Неопределено Тогда
				Документ = Метаданные.Документы.Получить(0);
			КонецЕсли;
		КонецЕсли;
		
		Реквизит = СтруктураРеквизита("Документ закупки", "documents." + Документ.Имя);
		ПользовательскийОбъект.properties.Вставить("ПриходнаяНакладная", Реквизит);
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = Новый Структура("name", "Закупочная цена");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Объекты.Вставить("_Партия", ПользовательскийОбъект);
		
		// Теперь загоняем наши объекты в JSON-строку
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, Новый Структура("customObjects", Объекты));
			Объекты = Файл.Закрыть();
		Исключение
			СообщитьПользователю("Не удалось сохранить пользовательские объекты:" + Символы.ПС + ОписаниеОшибки());
			Объекты = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Объекты;
	
КонецФункции

&НаКлиенте
Процедура УправлениеБыстрымиПодсказками()
	
	Элементы.БыстрыеПодсказки.Пометка = БыстрыеПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода()
	
	Элементы.КартаКода.Пометка = ВидимостьКартыКода;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния()
	
	Элементы.СтрокаСостояния.Пометка = ВидимостьСтрокиСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСравнения()
	
	Элементы.СравнитьСОригиналом.Видимость = ЗначениеЗаполнено(ИмяСохраненногоФайла);
	
КонецПроцедуры

&НаСервере
Функция ВывестиВТабДокНаСервере(Знач АдресТаблицы)
	
	Результат = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ВыводитьОбщиеИтоги = Ложь;
	ПостроительОтчета.ВыводитьПодвалТаблицы = Ложь;
	ПостроительОтчета.ВыводитьПодвалОтчета = Ложь;
	ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	ПостроительОтчета.Вывести(ТабДок);
	
	Возврат ПоместитьВоВременноеХранилище(ТабДок);
	
КонецФункции

&НаКлиенте
Процедура ВывестиВТабДок(Команда)
	ТекущиеДанные = Элементы.Таблицы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	АдресРезультата = ВывестиВТабДокНаСервере(ТекущиеДанные.РезультатЗапроса);
	ТабДок = ПолучитьИзВременногоХранилища(АдресРезультата);
	ТабДок.Записать("D:\tmp\список.csv", ТипФайлаТабличногоДокумента.TXT);
	
	Сообщить("D:\tmp\список.csv");
КонецПроцедуры

#КонецОбласти
